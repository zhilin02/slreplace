(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun |1 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_1 () Bool)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 4| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_2 () Bool)
(declare-fun |3 Fill 0| () String)
(declare-fun |3 Fill 1| () String)
(declare-fun |3 Fill 3| () String)
(declare-fun |3 Fill 2| () String)
(declare-fun |IsMatch_/^-[^-]+/_3| () Bool)
(declare-fun |4 Fill 0| () String)
(declare-fun |4 Fill 1| () String)
(declare-fun |4 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_4| () Bool)
(declare-fun |5 Fill 0| () String)
(declare-fun |5 Fill 1| () String)
(declare-fun |5 Fill 2| () String)
(declare-fun |5 Fill 3| () String)
(declare-fun |5 Fill 4| () String)
(declare-fun |5 Fill 5| () String)
(declare-fun |5 Fill 6| () String)
(declare-fun |5 Fill 7| () String)
(declare-fun |5 Fill 8| () String)
(declare-fun |5 Fill 9| () String)
(declare-fun |5 Fill 10| () String)
(declare-fun |5 Fill 11| () String)
(declare-fun |5 Fill 12| () String)
(declare-fun |5 Fill 13| () String)
(declare-fun |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_5|
             ()
             Bool)
(declare-fun |6 Fill 0| () String)
(declare-fun |6 Fill 1| () String)
(declare-fun |6 Fill 2| () String)
(declare-fun |6 Fill 3| () String)
(declare-fun |6 Fill 5| () String)
(declare-fun |6 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_6 () Bool)
(declare-fun |7 Fill 0| () String)
(declare-fun |7 Fill 1| () String)
(declare-fun |7 Fill 2| () String)
(declare-fun |7 Fill 3| () String)
(declare-fun |7 Fill 5| () String)
(declare-fun |7 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_7 () Bool)
(declare-fun |8 Fill 0| () String)
(declare-fun |8 Fill 1| () String)
(declare-fun |8 Fill 2| () String)
(declare-fun |8 Fill 4| () String)
(declare-fun |8 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_8 () Bool)
(declare-fun |9 Fill 0| () String)
(declare-fun |9 Fill 1| () String)
(declare-fun |9 Fill 3| () String)
(declare-fun |9 Fill 2| () String)
(declare-fun |IsMatch_/^-[^-]+/_9| () Bool)
(declare-fun |10 Fill 0| () String)
(declare-fun |10 Fill 1| () String)
(declare-fun |10 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_10| () Bool)
(declare-fun |11 Fill 0| () String)
(declare-fun |11 Fill 1| () String)
(declare-fun |11 Fill 2| () String)
(declare-fun |11 Fill 3| () String)
(declare-fun |11 Fill 4| () String)
(declare-fun |11 Fill 5| () String)
(declare-fun |11 Fill 6| () String)
(declare-fun |11 Fill 7| () String)
(declare-fun |11 Fill 8| () String)
(declare-fun |11 Fill 9| () String)
(declare-fun |11 Fill 10| () String)
(declare-fun |11 Fill 11| () String)
(declare-fun |11 Fill 12| () String)
(declare-fun |11 Fill 13| () String)
(declare-fun |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_11|
             ()
             Bool)
(declare-fun |12 Fill 0| () String)
(declare-fun |12 Fill 1| () String)
(declare-fun |12 Fill 2| () String)
(declare-fun |12 Fill 3| () String)
(declare-fun |12 Fill 5| () String)
(declare-fun |12 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_12 () Bool)
(declare-fun |13 Fill 0| () String)
(declare-fun |13 Fill 1| () String)
(declare-fun |13 Fill 2| () String)
(declare-fun |13 Fill 3| () String)
(declare-fun |13 Fill 5| () String)
(declare-fun |13 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_13 () Bool)
(declare-fun |14 Fill 0| () String)
(declare-fun |14 Fill 1| () String)
(declare-fun |14 Fill 2| () String)
(declare-fun |14 Fill 4| () String)
(declare-fun |14 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_14 () Bool)
(declare-fun |15 Fill 0| () String)
(declare-fun |15 Fill 1| () String)
(declare-fun |15 Fill 3| () String)
(declare-fun |15 Fill 2| () String)
(declare-fun |IsMatch_/^-[^-]+/_15| () Bool)
(declare-fun |16 Fill 0| () String)
(declare-fun |16 Fill 1| () String)
(declare-fun |16 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_16| () Bool)
(declare-fun |17 Fill 0| () String)
(declare-fun |17 Fill 1| () String)
(declare-fun |17 Fill 2| () String)
(declare-fun |17 Fill 3| () String)
(declare-fun |17 Fill 4| () String)
(declare-fun |17 Fill 5| () String)
(declare-fun |17 Fill 6| () String)
(declare-fun |17 Fill 7| () String)
(declare-fun |17 Fill 8| () String)
(declare-fun |17 Fill 9| () String)
(declare-fun |17 Fill 10| () String)
(declare-fun |17 Fill 11| () String)
(declare-fun |17 Fill 12| () String)
(declare-fun |17 Fill 13| () String)
(declare-fun |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_17|
             ()
             Bool)
(declare-fun |18 Fill 0| () String)
(declare-fun |18 Fill 1| () String)
(declare-fun |18 Fill 2| () String)
(declare-fun |18 Fill 3| () String)
(declare-fun |18 Fill 5| () String)
(declare-fun |18 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_18 () Bool)
(declare-fun |19 Fill 0| () String)
(declare-fun |19 Fill 1| () String)
(declare-fun |19 Fill 2| () String)
(declare-fun |19 Fill 3| () String)
(declare-fun |19 Fill 5| () String)
(declare-fun |19 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_19 () Bool)
(declare-fun |20 Fill 0| () String)
(declare-fun |20 Fill 1| () String)
(declare-fun |20 Fill 2| () String)
(declare-fun |20 Fill 4| () String)
(declare-fun |20 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_20 () Bool)
(declare-fun |21 Fill 0| () String)
(declare-fun |21 Fill 1| () String)
(declare-fun |21 Fill 3| () String)
(declare-fun |21 Fill 2| () String)
(declare-fun |IsMatch_/^-[^-]+/_21| () Bool)
(declare-fun |22 Fill 0| () String)
(declare-fun |22 Fill 1| () String)
(declare-fun |22 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_22| () Bool)
(declare-fun |23 Fill 0| () String)
(declare-fun |23 Fill 1| () String)
(declare-fun |23 Fill 2| () String)
(declare-fun |23 Fill 3| () String)
(declare-fun |23 Fill 4| () String)
(declare-fun |23 Fill 5| () String)
(declare-fun |23 Fill 6| () String)
(declare-fun |23 Fill 7| () String)
(declare-fun |23 Fill 8| () String)
(declare-fun |23 Fill 9| () String)
(declare-fun |23 Fill 10| () String)
(declare-fun |23 Fill 11| () String)
(declare-fun |23 Fill 12| () String)
(declare-fun |23 Fill 13| () String)
(declare-fun |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_23|
             ()
             Bool)
(declare-fun |24 Fill 0| () String)
(declare-fun |24 Fill 1| () String)
(declare-fun |24 Fill 2| () String)
(declare-fun |24 Fill 3| () String)
(declare-fun |24 Fill 5| () String)
(declare-fun |24 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_24 () Bool)
(declare-fun |25 Fill 0| () String)
(declare-fun |25 Fill 1| () String)
(declare-fun |25 Fill 2| () String)
(declare-fun |25 Fill 3| () String)
(declare-fun |25 Fill 5| () String)
(declare-fun |25 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_25 () Bool)
(declare-fun |26 Fill 0| () String)
(declare-fun |26 Fill 1| () String)
(declare-fun |26 Fill 2| () String)
(declare-fun |26 Fill 4| () String)
(declare-fun |26 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_26 () Bool)
(declare-fun |27 Fill 0| () String)
(declare-fun |27 Fill 1| () String)
(declare-fun |27 Fill 3| () String)
(declare-fun |27 Fill 2| () String)
(declare-fun |IsMatch_/^-[^-]+/_27| () Bool)
(declare-fun |28 Fill 0| () String)
(declare-fun |28 Fill 1| () String)
(declare-fun |28 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_28| () Bool)
(declare-fun |29 Fill 0| () String)
(declare-fun |29 Fill 1| () String)
(declare-fun |29 Fill 2| () String)
(declare-fun |29 Fill 3| () String)
(declare-fun |29 Fill 4| () String)
(declare-fun |29 Fill 5| () String)
(declare-fun |29 Fill 6| () String)
(declare-fun |29 Fill 7| () String)
(declare-fun |29 Fill 8| () String)
(declare-fun |29 Fill 9| () String)
(declare-fun |29 Fill 10| () String)
(declare-fun |29 Fill 11| () String)
(declare-fun |29 Fill 12| () String)
(declare-fun |29 Fill 13| () String)
(declare-fun |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_29|
             ()
             Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= Constructed_Argument_t
   (str.++ (seq.unit #x73)
           (seq.unit #x74)
           (seq.unit #x72)
           (seq.unit #x69)
           (seq.unit #x6e)
           (seq.unit #x67))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)
                (seq.unit #x65)
                (seq.unit #x61)
                (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6f)
                (seq.unit #x62)
                (seq.unit #x6a)
                (seq.unit #x65)
                (seq.unit #x63)
                (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (let ((a!1 (to_real (str.indexof Constructed_Argument
                                 (str.++ (seq.unit #x2d) (seq.unit #x2d))
                                 0))))
  (= a!1 (- 1.0))))
(assert (not (<= (to_real (str.len Constructed_Argument)) 0.0)))
(assert (= |0 Fill 0| (seq.unit #x2d)))
(assert (= |0 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |0 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |0 Fill 3| (seq.unit #x3d)))
(assert (= |0 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |0 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |0 Fill 2|
                 (seq.unit #x3d)
                 |0 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--.+=/_0))))
(assert (not IsMatch_/^--.+=/_0))
(assert (= |1 Fill 0| (seq.unit #x2d)))
(assert (= |1 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |1 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |1 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |1 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |1 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |1 Fill 3|
                 |1 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--no-.+/_1))))
(assert (not IsMatch_/^--no-.+/_1))
(assert (= |2 Fill 0| (seq.unit #x2d)))
(assert (= |2 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |2 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |2 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |2 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0) (str.++ |2 Fill 4| |2 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--.+/_2))))
(assert (not IsMatch_/^--.+/_2))
(assert (= |3 Fill 0| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |3 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |3 Fill 3| (str.++ (seq.unit #x2d) |3 Fill 1|)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0)
         (str.++ (seq.unit #x2d) |3 Fill 1| |3 Fill 2|))))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) |IsMatch_/^-[^-]+/_3|))))
(assert (not |IsMatch_/^-[^-]+/_3|))
(assert (= |4 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |4 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |4 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |4 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0) |4 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2)
     |IsMatch_/^0x[0-9a-f]+$/i_4|))))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_4|))
(assert (str.in.re |5 Fill 0|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |5 Fill 1| a!1)))
(assert (= |5 Fill 2| (seq.unit #x2e)))
(assert (str.in.re |5 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (= |5 Fill 4| (seq.unit #x2e)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |5 Fill 5| a!1)))
(assert (or (= |5 Fill 6| (str.++ |5 Fill 0| |5 Fill 1| (seq.unit #x2e) |5 Fill 3|))
    (= |5 Fill 6| (str.++ |5 Fill 0| (seq.unit #x2e) |5 Fill 5|))))
(assert (= |5 Fill 7| (seq.unit #x65)))
(assert (str.in.re |5 Fill 8|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |5 Fill 9| a!1)))
(assert (let ((a!1 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re (str.++ |5 Fill 8| |5 Fill 9|) a!1)))
(assert (or (= |5 Fill 10| (str.++ (seq.unit #x65) |5 Fill 8| |5 Fill 9|))
    (= "" |5 Fill 10|)))
(assert (or (not (= "" |5 Fill 10|)) (= "" |5 Fill 10|)))
(assert (or (not (= "" |5 Fill 10|)) (= "" |5 Fill 11|)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.++ |5 Fill 6| |5 Fill 11| |5 Fill 10|) a!5)))))
(assert (= |5 Fill 12| (str.++ |5 Fill 6| |5 Fill 11| |5 Fill 10|)))
(assert (= |5 Fill 13| |5 Fill 10|))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!5))
      (= (str.at Constructed_Argument 0) |5 Fill 12|))))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (= (str.in.re (str.at Constructed_Argument 0) a!5)
     |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_5|)))))
(assert (not |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_5|))
(assert (not (<= (to_real (str.len Constructed_Argument)) 1.0)))
(assert (= |6 Fill 0| (seq.unit #x2d)))
(assert (= |6 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |6 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |6 Fill 3| (seq.unit #x3d)))
(assert (= |6 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |6 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!2))
      (= (str.at Constructed_Argument 1)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |6 Fill 2|
                 (seq.unit #x3d)
                 |6 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 1) a!2) IsMatch_/^--.+=/_6))))
(assert (not IsMatch_/^--.+=/_6))
(assert (= |7 Fill 0| (seq.unit #x2d)))
(assert (= |7 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |7 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |7 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |7 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |7 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!2))
      (= (str.at Constructed_Argument 1)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |7 Fill 3|
                 |7 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 1) a!2) IsMatch_/^--no-.+/_7))))
(assert (not IsMatch_/^--no-.+/_7))
(assert (= |8 Fill 0| (seq.unit #x2d)))
(assert (= |8 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |8 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |8 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |8 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!2))
      (= (str.at Constructed_Argument 1) (str.++ |8 Fill 4| |8 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 1) a!2) IsMatch_/^--.+/_8))))
(assert (not IsMatch_/^--.+/_8))
(assert (= |9 Fill 0| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |9 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |9 Fill 3| (str.++ (seq.unit #x2d) |9 Fill 1|)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!2))
      (= (str.at Constructed_Argument 1)
         (str.++ (seq.unit #x2d) |9 Fill 1| |9 Fill 2|))))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 1) a!2) |IsMatch_/^-[^-]+/_9|))))
(assert (not |IsMatch_/^-[^-]+/_9|))
(assert (= |10 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |10 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |10 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |10 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!2))
      (= (str.at Constructed_Argument 1) |10 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re (str.at Constructed_Argument 1) a!2)
     |IsMatch_/^0x[0-9a-f]+$/i_10|))))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_10|))
(assert (str.in.re |11 Fill 0|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |11 Fill 1| a!1)))
(assert (= |11 Fill 2| (seq.unit #x2e)))
(assert (str.in.re |11 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (= |11 Fill 4| (seq.unit #x2e)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |11 Fill 5| a!1)))
(assert (or (= |11 Fill 6| (str.++ |11 Fill 0| (seq.unit #x2e) |11 Fill 5|))
    (= |11 Fill 6| (str.++ |11 Fill 0| |11 Fill 1| (seq.unit #x2e) |11 Fill 3|))))
(assert (= |11 Fill 7| (seq.unit #x65)))
(assert (str.in.re |11 Fill 8|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |11 Fill 9| a!1)))
(assert (let ((a!1 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re (str.++ |11 Fill 8| |11 Fill 9|) a!1)))
(assert (or (= |11 Fill 10| (str.++ (seq.unit #x65) |11 Fill 8| |11 Fill 9|))
    (= "" |11 Fill 10|)))
(assert (or (not (= "" |11 Fill 10|)) (= "" |11 Fill 10|)))
(assert (or (not (= "" |11 Fill 10|)) (= "" |11 Fill 11|)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.++ |11 Fill 6| |11 Fill 11| |11 Fill 10|) a!5)))))
(assert (= |11 Fill 12| (str.++ |11 Fill 6| |11 Fill 11| |11 Fill 10|)))
(assert (= |11 Fill 13| |11 Fill 10|))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (or (not (str.in.re (str.at Constructed_Argument 1) a!5))
      (= (str.at Constructed_Argument 1) |11 Fill 12|))))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (= (str.in.re (str.at Constructed_Argument 1) a!5)
     |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_11|)))))
(assert (not |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_11|))
(assert (not (<= (to_real (str.len Constructed_Argument)) 2.0)))
(assert (= |12 Fill 0| (seq.unit #x2d)))
(assert (= |12 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |12 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |12 Fill 3| (seq.unit #x3d)))
(assert (= |12 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |12 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!2))
      (= (str.at Constructed_Argument 2)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |12 Fill 2|
                 (seq.unit #x3d)
                 |12 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 2) a!2) IsMatch_/^--.+=/_12))))
(assert (not IsMatch_/^--.+=/_12))
(assert (= |13 Fill 0| (seq.unit #x2d)))
(assert (= |13 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |13 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |13 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |13 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |13 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!2))
      (= (str.at Constructed_Argument 2)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |13 Fill 3|
                 |13 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 2) a!2) IsMatch_/^--no-.+/_13))))
(assert (not IsMatch_/^--no-.+/_13))
(assert (= |14 Fill 0| (seq.unit #x2d)))
(assert (= |14 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |14 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |14 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |14 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!2))
      (= (str.at Constructed_Argument 2) (str.++ |14 Fill 4| |14 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 2) a!2) IsMatch_/^--.+/_14))))
(assert (not IsMatch_/^--.+/_14))
(assert (= |15 Fill 0| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |15 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |15 Fill 3| (str.++ (seq.unit #x2d) |15 Fill 1|)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!2))
      (= (str.at Constructed_Argument 2)
         (str.++ (seq.unit #x2d) |15 Fill 1| |15 Fill 2|))))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 2) a!2) |IsMatch_/^-[^-]+/_15|))))
(assert (not |IsMatch_/^-[^-]+/_15|))
(assert (= |16 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |16 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |16 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |16 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!2))
      (= (str.at Constructed_Argument 2) |16 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re (str.at Constructed_Argument 2) a!2)
     |IsMatch_/^0x[0-9a-f]+$/i_16|))))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_16|))
(assert (str.in.re |17 Fill 0|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |17 Fill 1| a!1)))
(assert (= |17 Fill 2| (seq.unit #x2e)))
(assert (str.in.re |17 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (= |17 Fill 4| (seq.unit #x2e)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |17 Fill 5| a!1)))
(assert (or (= |17 Fill 6| (str.++ |17 Fill 0| |17 Fill 1| (seq.unit #x2e) |17 Fill 3|))
    (= |17 Fill 6| (str.++ |17 Fill 0| (seq.unit #x2e) |17 Fill 5|))))
(assert (= |17 Fill 7| (seq.unit #x65)))
(assert (str.in.re |17 Fill 8|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |17 Fill 9| a!1)))
(assert (let ((a!1 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re (str.++ |17 Fill 8| |17 Fill 9|) a!1)))
(assert (or (= |17 Fill 10| (str.++ (seq.unit #x65) |17 Fill 8| |17 Fill 9|))
    (= "" |17 Fill 10|)))
(assert (or (not (= "" |17 Fill 10|)) (= "" |17 Fill 10|)))
(assert (or (not (= "" |17 Fill 10|)) (= "" |17 Fill 11|)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.++ |17 Fill 6| |17 Fill 11| |17 Fill 10|) a!5)))))
(assert (= |17 Fill 12| (str.++ |17 Fill 6| |17 Fill 11| |17 Fill 10|)))
(assert (= |17 Fill 13| |17 Fill 10|))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (or (not (str.in.re (str.at Constructed_Argument 2) a!5))
      (= (str.at Constructed_Argument 2) |17 Fill 12|))))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (= (str.in.re (str.at Constructed_Argument 2) a!5)
     |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_17|)))))
(assert (not |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_17|))
(assert (not (<= (to_real (str.len Constructed_Argument)) 3.0)))
(assert (= |18 Fill 0| (seq.unit #x2d)))
(assert (= |18 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |18 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |18 Fill 3| (seq.unit #x3d)))
(assert (= |18 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |18 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!2))
      (= (str.at Constructed_Argument 3)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |18 Fill 2|
                 (seq.unit #x3d)
                 |18 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 3) a!2) IsMatch_/^--.+=/_18))))
(assert (not IsMatch_/^--.+=/_18))
(assert (= |19 Fill 0| (seq.unit #x2d)))
(assert (= |19 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |19 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |19 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |19 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |19 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!2))
      (= (str.at Constructed_Argument 3)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |19 Fill 3|
                 |19 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 3) a!2) IsMatch_/^--no-.+/_19))))
(assert (not IsMatch_/^--no-.+/_19))
(assert (= |20 Fill 0| (seq.unit #x2d)))
(assert (= |20 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |20 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |20 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |20 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!2))
      (= (str.at Constructed_Argument 3) (str.++ |20 Fill 4| |20 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 3) a!2) IsMatch_/^--.+/_20))))
(assert (not IsMatch_/^--.+/_20))
(assert (= |21 Fill 0| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |21 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |21 Fill 3| (str.++ (seq.unit #x2d) |21 Fill 1|)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!2))
      (= (str.at Constructed_Argument 3)
         (str.++ (seq.unit #x2d) |21 Fill 1| |21 Fill 2|))))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 3) a!2) |IsMatch_/^-[^-]+/_21|))))
(assert (not |IsMatch_/^-[^-]+/_21|))
(assert (= |22 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |22 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |22 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |22 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!2))
      (= (str.at Constructed_Argument 3) |22 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re (str.at Constructed_Argument 3) a!2)
     |IsMatch_/^0x[0-9a-f]+$/i_22|))))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_22|))
(assert (str.in.re |23 Fill 0|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |23 Fill 1| a!1)))
(assert (= |23 Fill 2| (seq.unit #x2e)))
(assert (str.in.re |23 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (= |23 Fill 4| (seq.unit #x2e)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |23 Fill 5| a!1)))
(assert (or (= |23 Fill 6| (str.++ |23 Fill 0| |23 Fill 1| (seq.unit #x2e) |23 Fill 3|))
    (= |23 Fill 6| (str.++ |23 Fill 0| (seq.unit #x2e) |23 Fill 5|))))
(assert (= |23 Fill 7| (seq.unit #x65)))
(assert (str.in.re |23 Fill 8|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |23 Fill 9| a!1)))
(assert (let ((a!1 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re (str.++ |23 Fill 8| |23 Fill 9|) a!1)))
(assert (or (= "" |23 Fill 10|)
    (= |23 Fill 10| (str.++ (seq.unit #x65) |23 Fill 8| |23 Fill 9|))))
(assert (or (not (= "" |23 Fill 10|)) (= "" |23 Fill 11|)))
(assert (or (not (= "" |23 Fill 10|)) (= "" |23 Fill 10|)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.++ |23 Fill 6| |23 Fill 11| |23 Fill 10|) a!5)))))
(assert (= |23 Fill 12| (str.++ |23 Fill 6| |23 Fill 11| |23 Fill 10|)))
(assert (= |23 Fill 13| |23 Fill 10|))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (or (not (str.in.re (str.at Constructed_Argument 3) a!5))
      (= (str.at Constructed_Argument 3) |23 Fill 12|))))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (= (str.in.re (str.at Constructed_Argument 3) a!5)
     |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_23|)))))
(assert (not |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_23|))
(assert (not (<= (to_real (str.len Constructed_Argument)) 4.0)))
(assert (= |24 Fill 0| (seq.unit #x2d)))
(assert (= |24 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |24 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |24 Fill 3| (seq.unit #x3d)))
(assert (= |24 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |24 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!2))
      (= (str.at Constructed_Argument 4)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |24 Fill 2|
                 (seq.unit #x3d)
                 |24 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 4) a!2) IsMatch_/^--.+=/_24))))
(assert (not IsMatch_/^--.+=/_24))
(assert (= |25 Fill 0| (seq.unit #x2d)))
(assert (= |25 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |25 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |25 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |25 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |25 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!2))
      (= (str.at Constructed_Argument 4)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |25 Fill 3|
                 |25 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 4) a!2) IsMatch_/^--no-.+/_25))))
(assert (not IsMatch_/^--no-.+/_25))
(assert (= |26 Fill 0| (seq.unit #x2d)))
(assert (= |26 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |26 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |26 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |26 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!2))
      (= (str.at Constructed_Argument 4) (str.++ |26 Fill 4| |26 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 4) a!2) IsMatch_/^--.+/_26))))
(assert (not IsMatch_/^--.+/_26))
(assert (= |27 Fill 0| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |27 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |27 Fill 3| (str.++ (seq.unit #x2d) |27 Fill 1|)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!2))
      (= (str.at Constructed_Argument 4)
         (str.++ (seq.unit #x2d) |27 Fill 1| |27 Fill 2|))))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x2d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (seq.unit #x2d))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 4) a!2) |IsMatch_/^-[^-]+/_27|))))
(assert (not |IsMatch_/^-[^-]+/_27|))
(assert (= |28 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |28 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |28 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |28 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!2))
      (= (str.at Constructed_Argument 4) |28 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re (str.at Constructed_Argument 4) a!2)
     |IsMatch_/^0x[0-9a-f]+$/i_28|))))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_28|))
(assert (str.in.re |29 Fill 0|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |29 Fill 1| a!1)))
(assert (= |29 Fill 2| (seq.unit #x2e)))
(assert (str.in.re |29 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (= |29 Fill 4| (seq.unit #x2e)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |29 Fill 5| a!1)))
(assert (or (= |29 Fill 6| (str.++ |29 Fill 0| (seq.unit #x2e) |29 Fill 5|))
    (= |29 Fill 6| (str.++ |29 Fill 0| |29 Fill 1| (seq.unit #x2e) |29 Fill 3|))))
(assert (= |29 Fill 7| (seq.unit #x65)))
(assert (str.in.re |29 Fill 8|
           (re.union (str.to.re (seq.unit #x2d))
                     (str.to.re "")
                     (str.to.re (seq.unit #x2b)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |29 Fill 9| a!1)))
(assert (let ((a!1 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re (str.++ |29 Fill 8| |29 Fill 9|) a!1)))
(assert (or (= |29 Fill 10| (str.++ (seq.unit #x65) |29 Fill 8| |29 Fill 9|))
    (= "" |29 Fill 10|)))
(assert (or (not (= "" |29 Fill 10|)) (= "" |29 Fill 11|)))
(assert (or (not (= "" |29 Fill 10|)) (= "" |29 Fill 10|)))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.++ |29 Fill 6| |29 Fill 11| |29 Fill 10|) a!5)))))
(assert (= |29 Fill 12| (str.++ |29 Fill 6| |29 Fill 11| |29 Fill 10|)))
(assert (= |29 Fill 13| |29 Fill 10|))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (or (not (str.in.re (str.at Constructed_Argument 4) a!5))
      (= (str.at Constructed_Argument 4) |29 Fill 12|))))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (= (str.in.re (str.at Constructed_Argument 4) a!5)
     |IsMatch_/^[-+]?(?:\\d+(?:\\.\\d*)?\|\\.\\d+)(e[-+]?\\d+)?$/_29|)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x30) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.++ (str.to.re (seq.unit #x2e))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
(let ((a!3 (re.union (re.++ a!1 (re.union (str.to.re "") a!2))
                     (re.++ (str.to.re (seq.unit #x2e)) a!1)))
      (a!4 (re.++ (str.to.re (seq.unit #x65))
                  (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!1)))
(let ((a!5 (re.++ (re.union (str.to.re (seq.unit #x2d))
                            (str.to.re "")
                            (str.to.re (seq.unit #x2b)))
                  a!3
                  (re.union (str.to.re "") a!4))))
  (str.in.re (str.at Constructed_Argument 4) a!5)))))

(check-sat)