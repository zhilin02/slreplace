(set-option :parse-transducers true)
(define-funs-rec ((MatchTD_0_1main ((x String) (y String)) Bool) (MatchTD_0_1s0a ((x String) (y String)) Bool) (MatchTD_0_1s1a ((x String) (y String)) Bool) (MatchTD_0_1s2a ((x String) (y String)) Bool) (MatchTD_0_1s4a ((x String) (y String)) Bool) (MatchTD_0_1s3a ((x String) (y String)) Bool) (MatchTD_0_1s3aWildos3a ((x String) (y String)) Bool) (MatchTD_0_1s3aemptyos4a ((x String) (y String)) Bool)) ((MatchTD_0_1s0a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_1s1a (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_1s2a (str.tail x) y)) (and (not (= x "")) (MatchTD_0_1s3a (str.tail x) y)) (or (and (= x "") (= y ""))) (or (MatchTD_0_1s3aWildos3a x y) (and (not (exists ((z String)) (MatchTD_0_1s3aWildos3a x z))) (MatchTD_0_1s3aemptyos4a x y))) (and (not (= x "")) (MatchTD_0_1s3a (str.tail x) y)) (MatchTD_0_1s4a x y)))
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_Array_Length () Int)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |_IndexOf_0)| () Int)
(declare-fun Constructed_Argument () (Array Int String))
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun IsMatch_/^--no-.+/_1 () Bool)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 4| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_2 () Bool)
(declare-fun |IsMatch_/^--(.+)/_3| () Bool)
(declare-fun IsMatch_/./_4 () Bool)
(declare-fun IsMatch_/./_5 () Bool)
(declare-fun IsMatch_/./_6 () Bool)
(declare-fun IsMatch_/./_7 () Bool)
(assert (= Constructed_Argument_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67))))
(assert (>= Constructed_Argument_Array_Length 0))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c) (seq.unit #x65) (seq.unit #x61) (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6f) (seq.unit #x62) (seq.unit #x6a) (seq.unit #x65) (seq.unit #x63) (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (>= |_IndexOf_0)| (- 1)))
(assert (not (<= (+ Constructed_Argument_Array_Length (* (- 1) |_IndexOf_0)|)) 0)))
(assert (or (= |_IndexOf_0)| (- 1)) (= (select Constructed_Argument |_IndexOf_0)|) (str.++ (seq.unit #x2d) (seq.unit #x2d)))))
(assert (or (<= |_IndexOf_0)| (- 1)) (forall ((_fn_IndexOf_0_ Int)) (! (or (not (>= _fn_IndexOf_0_ 0)) (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0) (not (= (select Constructed_Argument _fn_IndexOf_0_) (str.++ (seq.unit #x2d) (seq.unit #x2d))))) :pattern ((not (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0)) (>= _fn_IndexOf_0_ 0)) :weight 0))))
(assert (= (to_real |_IndexOf_0)|) (- 1.0)))
(assert (not (<= (to_real Constructed_Argument_Array_Length) 0.0)))
(assert (str.in.re (select Constructed_Argument 0) (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff)))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert IsMatch_/^--.+/_2)
(assert |IsMatch_/^--(.+)/_3|)
(assert (<= (to_real Constructed_Argument_Array_Length) 1.0))
(assert (or (not (= "" |3 Fill 3|)) (not (= "" |3 Fill 4|))))
(assert (= (not (or (= (str.len |3 Fill 2|) 0) (not (str.in.re |3 Fill 2| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_4))
(assert (not (= (str.len |3 Fill 2|) 0)))
(assert (str.in.re |3 Fill 2| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert (= (not (or (not (str.in.re (str.substr |3 Fill 2| (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))) (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0)))) 0))) IsMatch_/./_5))
(assert (not (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0)))) 0)))
(assert (str.in.re (str.substr |3 Fill 2| (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |4 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|)) 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert (let ((a!1 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)))) (= (not (or (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= a!1 0) a!1 0)))) 0) (not (str.in.re (str.substr |3 Fill 2| (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= a!1 0) a!1 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= a!1 0) a!1 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_6)))
(assert (not (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0)))) 0)))
(assert (let ((a!1 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)))) (str.in.re (str.substr |3 Fill 2| (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= a!1 0) a!1 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) 0) (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|)) (ite (>= a!1 0) a!1 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))
(assert (let ((a!1 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|) (str.len |6 Fill 0|))) (a!2 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|) (str.len |6 Fill 0|)))) (= (not (or (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0)))) 0) (not (str.in.re (str.substr |3 Fill 2| (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_7)))
(assert (let ((a!1 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|) (str.len |4 Fill 0|) (str.len |5 Fill 0|) (str.len |6 Fill 0|))) (a!2 (+ (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|) (str.len |3 Fill 2|) (str.len |4 Fill 0|) (str.len |5 Fill 0|) (str.len |6 Fill 0|)))) (not (and (not (<= (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0)))) 0)) (str.in.re (str.substr |3 Fill 2| (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0)) (+ (str.len |3 Fill 2|) (* (- 1) (ite (>= a!1 0) a!1 (ite (>= a!2 0) a!2 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))))
(check-sat)
