(set-option :parse-transducers true)
(define-funs-rec ((MatchTD_0_1main ((x String) (y String)) Bool) (MatchTD_0_1mainemptyos0a ((x String) (y String)) Bool) (MatchTD_0_1mainWildomain ((x String) (y String)) Bool) (MatchTD_0_1s0a ((x String) (y String)) Bool) (MatchTD_0_1s2a ((x String) (y String)) Bool) (MatchTD_0_1s3a ((x String) (y String)) Bool) (MatchTD_0_1s4a ((x String) (y String)) Bool) (MatchTD_0_1s5a ((x String) (y String)) Bool) (MatchTD_0_1s5aWildos5a ((x String) (y String)) Bool) (MatchTD_0_1s5aemptyos6a ((x String) (y String)) Bool) (MatchTD_0_1s6a ((x String) (y String)) Bool) (MatchTD_0_1s11i ((x String) (y String)) Bool) (MatchTD_0_1s11iWildcs11i ((x String) (y String)) Bool) (MatchTD_0_1s11iemptycs10a ((x String) (y String)) Bool) (MatchTD_0_1s8a ((x String) (y String)) Bool) (MatchTD_0_1s9a ((x String) (y String)) Bool) (MatchTD_0_1s10a ((x String) (y String)) Bool)) ((or (MatchTD_0_1mainemptyos0a x y) (and (not (exists ((z String)) (MatchTD_0_1mainemptyos0a x z))) (MatchTD_0_1mainWildomain x y))) (MatchTD_0_1s0a x y) (and (not (= x "")) (MatchTD_0_1main (str.tail x) y)) (MatchTD_0_1s2a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_1s3a (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_1s4a (str.tail x) y)) (and (not (= x "")) (MatchTD_0_1s5a (str.tail x) y)) (or (MatchTD_0_1s5aWildos5a x y) (and (not (exists ((z String)) (MatchTD_0_1s5aWildos5a x z))) (MatchTD_0_1s5aemptyos6a x y))) (and (not (= x "")) (MatchTD_0_1s5a (str.tail x) y)) (MatchTD_0_1s6a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "=")) (MatchTD_0_1s8a (str.tail x) y)) (or (MatchTD_0_1s11iWildcs11i x y) (and (not (exists ((z String)) (MatchTD_0_1s11iWildcs11i x z))) (MatchTD_0_1s11iemptycs10a x y))) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_1s11i (str.tail x) (str.tail y))) (MatchTD_0_1s10a x y) (MatchTD_0_1s11i x y) (or (and (= x "") (= y ""))) (MatchTD_0_1s9a x y)))
(define-funs-rec ((MatchTD_0_2main ((x String) (y String)) Bool) (MatchTD_0_2s2i ((x String) (y String)) Bool) (MatchTD_0_2s2iemptycs1a ((x String) (y String)) Bool) (MatchTD_0_2s2iWildcs2i ((x String) (y String)) Bool) (MatchTD_0_2s1a ((x String) (y String)) Bool) (MatchTD_0_2s0a ((x String) (y String)) Bool) (MatchTD_0_2s3a ((x String) (y String)) Bool) (MatchTD_0_2s4a ((x String) (y String)) Bool) (MatchTD_0_2s5a ((x String) (y String)) Bool) (MatchTD_0_2s6a ((x String) (y String)) Bool) (MatchTD_0_2s6aWildos6a ((x String) (y String)) Bool) (MatchTD_0_2s6aemptyos7a ((x String) (y String)) Bool) (MatchTD_0_2s7a ((x String) (y String)) Bool) (MatchTD_0_2s10a ((x String) (y String)) Bool) (MatchTD_0_2s9a ((x String) (y String)) Bool) (MatchTD_0_2s9aWildos9a ((x String) (y String)) Bool) (MatchTD_0_2s9aemptyos10a ((x String) (y String)) Bool)) ((MatchTD_0_2s2i x y) (or (MatchTD_0_2s2iemptycs1a x y) (and (not (exists ((z String)) (MatchTD_0_2s2iemptycs1a x z))) (MatchTD_0_2s2iWildcs2i x y))) (MatchTD_0_2s1a x y) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_2s2i (str.tail x) (str.tail y))) (MatchTD_0_2s0a x y) (MatchTD_0_2s3a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_2s4a (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "-")) (MatchTD_0_2s5a (str.tail x) y)) (and (not (= x "")) (MatchTD_0_2s6a (str.tail x) y)) (or (MatchTD_0_2s6aWildos6a x y) (and (not (exists ((z String)) (MatchTD_0_2s6aWildos6a x z))) (MatchTD_0_2s6aemptyos7a x y))) (and (not (= x "")) (MatchTD_0_2s6a (str.tail x) y)) (MatchTD_0_2s7a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "=")) (MatchTD_0_2s9a (str.tail x) y)) (or (and (= x "") (= y ""))) (or (MatchTD_0_2s9aWildos9a x y) (and (not (exists ((z String)) (MatchTD_0_2s9aWildos9a x z))) (MatchTD_0_2s9aemptyos10a x y))) (and (not (= x "")) (MatchTD_0_2s9a (str.tail x) y)) (MatchTD_0_2s10a x y)))
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_Array_Length () Int)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |_IndexOf_0)| () Int)
(declare-fun Constructed_Argument () (Array Int String))
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |IsMatch_/^--([^=]+)=([BSsBSS]*)$/_1| () Bool)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_2| () Bool)
(declare-fun |IsMatch_/^[-+]?(?:BSd+(?:BS.BSd*)?STBS.BSd+)(e[-+]?BSd+)?$/_3| () Bool)
(declare-fun IsMatch_/./_4 () Bool)
(assert (= Constructed_Argument_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67))))
(assert (>= Constructed_Argument_Array_Length 0))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c) (seq.unit #x65) (seq.unit #x61) (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6f) (seq.unit #x62) (seq.unit #x6a) (seq.unit #x65) (seq.unit #x63) (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (>= |_IndexOf_0)| (- 1)))
(assert (not (<= (+ Constructed_Argument_Array_Length (* (- 1) |_IndexOf_0)|)) 0)))
(assert (or (= |_IndexOf_0)| (- 1)) (= (select Constructed_Argument |_IndexOf_0)|) (str.++ (seq.unit #x2d) (seq.unit #x2d)))))
(assert (or (<= |_IndexOf_0)| (- 1)) (forall ((_fn_IndexOf_0_ Int)) (! (or (not (>= _fn_IndexOf_0_ 0)) (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0) (not (= (select Constructed_Argument _fn_IndexOf_0_) (str.++ (seq.unit #x2d) (seq.unit #x2d))))) :pattern ((not (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0)) (>= _fn_IndexOf_0_ 0)) :weight 0))))
(assert (= (to_real |_IndexOf_0)|) (- 1.0)))
(assert (not (<= (to_real Constructed_Argument_Array_Length) 0.0)))
(assert (MatchTD_0_2main (select Constructed_Argument 0) |0 Fill 2|))
(assert (MatchTD_0_1main (select Constructed_Argument 0) |0 Fill 4|))
(assert (str.in.re (select Constructed_Argument 0) (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff)))) (str.to.re (seq.unit #x3d)) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert IsMatch_/^--.+=/_0)
(assert (= (str.in.re (select Constructed_Argument 0) (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d))) (re.inter (re.comp (str.to.re (seq.unit #x3d))) (re.range (seq.unit #x00) (seq.unit #xff))) (re.* (re.inter (re.comp (str.to.re (seq.unit #x3d))) (re.range (seq.unit #x00) (seq.unit #xff)))) (str.to.re (seq.unit #x3d)) (re.* (re.union (str.to.re (seq.unit #x73)) (str.to.re (seq.unit #x53)))))) |IsMatch_/^--([^=]+)=([BSsBSS]*)$/_1|))
(assert |IsMatch_/^--([^=]+)=([BSsBSS]*)$/_1|)
(assert (not (= "" (select Constructed_Argument 0))))
(assert (= (str.in.re |1 Fill 4| (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78))) (re.union (re.range (seq.unit #x30) (seq.unit #x39)) (re.range (seq.unit #x61) (seq.unit #x66))) (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) (re.range (seq.unit #x61) (seq.unit #x66)))))) |IsMatch_/^0x[0-9a-f]+$/i_2|))
(assert (not |IsMatch_/^0x[0-9a-f]+$/i_2|))
(assert (= (str.in.re |1 Fill 4| (re.++ (re.union (str.to.re (seq.unit #x2d)) (str.to.re "") (str.to.re (seq.unit #x2b))) (re.union (re.++ (re.++ (re.range (seq.unit #x30) (seq.unit #x39)) (re.* (re.range (seq.unit #x30) (seq.unit #x39)))) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2e)) (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))) (re.++ (str.to.re (seq.unit #x2e)) (re.++ (re.range (seq.unit #x30) (seq.unit #x39)) (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x65)) (re.union (str.to.re (seq.unit #x2d)) (str.to.re "") (str.to.re (seq.unit #x2b))) (re.++ (re.range (seq.unit #x30) (seq.unit #x39)) (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))))) |IsMatch_/^[-+]?(?:BSd+(?:BS.BSd*)?STBS.BSd+)(e[-+]?BSd+)?$/_3|))
(assert (not |IsMatch_/^[-+]?(?:BSd+(?:BS.BSd*)?STBS.BSd+)(e[-+]?BSd+)?$/_3|))
(assert (= (not (or (= (str.len |1 Fill 2|) 0) (not (str.in.re |1 Fill 2| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_4))
(assert (not (and (not (= (str.len |1 Fill 2|) 0)) (str.in.re |1 Fill 2| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))))
(check-sat)
