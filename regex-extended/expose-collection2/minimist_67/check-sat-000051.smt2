(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun |1 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_1 () Bool)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 4| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun IsMatch_/^--.+/_2 () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= Constructed_Argument_t
   (str.++ (seq.unit #x73)
           (seq.unit #x74)
           (seq.unit #x72)
           (seq.unit #x69)
           (seq.unit #x6e)
           (seq.unit #x67))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)
                (seq.unit #x65)
                (seq.unit #x61)
                (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6f)
                (seq.unit #x62)
                (seq.unit #x6a)
                (seq.unit #x65)
                (seq.unit #x63)
                (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (let ((a!1 (to_real (str.indexof Constructed_Argument
                                 (str.++ (seq.unit #x2d) (seq.unit #x2d))
                                 0))))
  (= a!1 (- 1.0))))
(assert (not (<= (to_real (str.len Constructed_Argument)) 0.0)))
(assert (= |0 Fill 0| (seq.unit #x2d)))
(assert (= |0 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |0 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |0 Fill 3| (seq.unit #x3d)))
(assert (= |0 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |0 Fill 2| (seq.unit #x3d))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 |0 Fill 2|
                 (seq.unit #x3d)
                 |0 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--.+=/_0))))
(assert (not IsMatch_/^--.+=/_0))
(assert (= |1 Fill 0| (seq.unit #x2d)))
(assert (= |1 Fill 1| (str.++ (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f))))
(assert (= |1 Fill 2| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |1 Fill 3| (re.++ a!1 (re.* a!1)))))
(assert (= |1 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           (seq.unit #x6e)
           (seq.unit #x6f)
           (seq.unit #x2d)
           |1 Fill 3|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0)
         (str.++ (seq.unit #x2d)
                 (seq.unit #x2d)
                 (seq.unit #x6e)
                 (seq.unit #x6f)
                 (seq.unit #x2d)
                 |1 Fill 3|
                 |1 Fill 4|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d)
                                     (seq.unit #x2d)
                                     (seq.unit #x6e)
                                     (seq.unit #x6f)
                                     (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--no-.+/_1))))
(assert (not IsMatch_/^--no-.+/_1))
(assert (= |2 Fill 0| (seq.unit #x2d)))
(assert (= |2 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
  (str.in.re |2 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |2 Fill 4| (str.++ (seq.unit #x2d) (seq.unit #x2d) |2 Fill 2|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (or (not (str.in.re (str.at Constructed_Argument 0) a!2))
      (= (str.at Constructed_Argument 0) (str.++ |2 Fill 4| |2 Fill 3|))))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (= (str.in.re (str.at Constructed_Argument 0) a!2) IsMatch_/^--.+/_2))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x0b) (seq.unit #xff))
                     (re.range (seq.unit #x00) (seq.unit #x09)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (str.in.re (str.at Constructed_Argument 0) a!2))))

(check-sat)