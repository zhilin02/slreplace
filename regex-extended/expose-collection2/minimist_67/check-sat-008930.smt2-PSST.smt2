(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_Array_Length () Int)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |_IndexOf_0)| () Int)
(declare-fun Constructed_Argument () (Array Int String))
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun |1 Fill 4| () String)
(declare-fun IsMatch_/^--no-.+/_1 () Bool)
(declare-fun |IsMatch_/^--no-(.+)/_2| () Bool)
(declare-fun IsMatch_/./_3 () Bool)
(declare-fun IsMatch_/./_4 () Bool)
(assert (= Constructed_Argument_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67))))
(assert (>= Constructed_Argument_Array_Length 0))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c) (seq.unit #x65) (seq.unit #x61) (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6f) (seq.unit #x62) (seq.unit #x6a) (seq.unit #x65) (seq.unit #x63) (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (>= |_IndexOf_0)| (- 1)))
(assert (not (<= (+ Constructed_Argument_Array_Length (* (- 1) |_IndexOf_0)|)) 0)))
(assert (or (= |_IndexOf_0)| (- 1)) (= (select Constructed_Argument |_IndexOf_0)|) (str.++ (seq.unit #x2d) (seq.unit #x2d)))))
(assert (or (<= |_IndexOf_0)| (- 1)) (forall ((_fn_IndexOf_0_ Int)) (! (or (not (>= _fn_IndexOf_0_ 0)) (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0) (not (= (select Constructed_Argument _fn_IndexOf_0_) (str.++ (seq.unit #x2d) (seq.unit #x2d))))) :pattern ((not (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0)) (>= _fn_IndexOf_0_ 0)) :weight 0))))
(assert (= (to_real |_IndexOf_0)|) (- 1.0)))
(assert (not (<= (to_real Constructed_Argument_Array_Length) 0.0)))
(assert (let ((re!1 (re.++ (str.to.re "-") (re.++ (str.to.re "-") (re.++ (str.to.re "n") (re.++ (str.to.re "o") (re.++ (str.to.re "-") (re.+ (str.to.re "."))))))))) and))
(assert (str.in.re (select Constructed_Argument 0) (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d) (seq.unit #x6e) (seq.unit #x6f) (seq.unit #x2d))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff)))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert IsMatch_/^--no-.+/_1)
(assert |IsMatch_/^--no-(.+)/_2|)
(assert (not (= "" (select Constructed_Argument 0))))
(assert (= (not (or (= (str.len |2 Fill 3|) 0) (not (str.in.re |2 Fill 3| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_3))
(assert (not (= (str.len |2 Fill 3|) 0)))
(assert (str.in.re |2 Fill 3| (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
(assert (= (not (or (<= (+ (str.len |2 Fill 3|) (* (- 1) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0)))) 0) (not (str.in.re (str.substr |2 Fill 3| (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0)) (+ (str.len |2 Fill 3|) (* (- 1) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff)))))))) IsMatch_/./_4))
(assert (or (<= (+ (str.len |2 Fill 3|) (* (- 1) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0)))) 0) (not (str.in.re (str.substr |2 Fill 3| (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0)) (+ (str.len |2 Fill 3|) (* (- 1) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0) (+ (str.len |3 Fill 1|) (str.len |3 Fill 0|) (str.len |2 Fill 3|)) 0))))) (re.++ (re.* (re.range (seq.unit #x00) (seq.unit #xff))) (re.union (re.range (seq.unit #x00) (seq.unit #x09)) (re.range (seq.unit #x0b) (seq.unit #xff))) (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))))
(assert (not (= (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) (str.len |2 Fill 3|))) 0) |2 Fill 3| (str.substr |2 Fill 3| 0 (str.len |3 Fill 1|))) (str.++ (seq.unit #x5f) (seq.unit #x5f) (seq.unit #x70) (seq.unit #x72) (seq.unit #x6f) (seq.unit #x74) (seq.unit #x6f) (seq.unit #x5f) (seq.unit #x5f)))))
(assert (= (seq.unit #x5f) (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) (str.len |2 Fill 3|))) 0) |2 Fill 3| (str.substr |2 Fill 3| 0 (str.len |3 Fill 1|)))))
(assert (not (= (seq.unit #x5f) (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) (str.len |2 Fill 3|))) 0) |2 Fill 3| (str.substr |2 Fill 3| 0 (str.len |3 Fill 1|))))))
(check-sat)
