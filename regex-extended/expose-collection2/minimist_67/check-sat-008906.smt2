(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_Array_Length () Int)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |_IndexOf_0)| () Int)
(declare-fun Constructed_Argument () (Array Int String))
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun IsMatch_/^--.+=/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 4| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun |1 Fill 6| () String)
(declare-fun |1 Fill 7| () String)
(declare-fun |IsMatch_/^--([^=]+)=([\\s\\S]*)$/_1| () Bool)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |IsMatch_/^0x[0-9a-f]+$/i_2| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= Constructed_Argument_t
   (str.++ (seq.unit #x61)
           (seq.unit #x72)
           (seq.unit #x72)
           (seq.unit #x61)
           (seq.unit #x79)
           (seq.unit #x5f)
           (seq.unit #x73)
           (seq.unit #x74)
           (seq.unit #x72)
           (seq.unit #x69)
           (seq.unit #x6e)
           (seq.unit #x67))))
(assert (>= Constructed_Argument_Array_Length 0))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)
                (seq.unit #x65)
                (seq.unit #x61)
                (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6f)
                (seq.unit #x62)
                (seq.unit #x6a)
                (seq.unit #x65)
                (seq.unit #x63)
                (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (>= |_IndexOf_0)| (- 1)))
(assert (not (<= (+ Constructed_Argument_Array_Length (* (- 1) |_IndexOf_0)|)) 0)))
(assert (or (= |_IndexOf_0)| (- 1))
    (= (select Constructed_Argument |_IndexOf_0)|)
       (str.++ (seq.unit #x2d) (seq.unit #x2d)))))
(assert (let ((a!1 (forall ((_fn_IndexOf_0_ Int))
             (! (let ((a!1 (not (= (select Constructed_Argument _fn_IndexOf_0_)
                                   (str.++ (seq.unit #x2d) (seq.unit #x2d))))))
                  (or (not (>= _fn_IndexOf_0_ 0))
                      (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0)
                      a!1))
                :pattern ((not (>= (+ _fn_IndexOf_0_ (* (- 1) |_IndexOf_0)|)) 0))
                          (>= _fn_IndexOf_0_ 0))
                :weight 0))))
  (or (<= |_IndexOf_0)| (- 1)) a!1)))
(assert (= (to_real |_IndexOf_0)|) (- 1.0)))
(assert (not (<= (to_real Constructed_Argument_Array_Length) 0.0)))
(assert (= |0 Fill 0| (seq.unit #x2d)))
(assert (= |0 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x00) (seq.unit #x09))
                     (re.range (seq.unit #x0b) (seq.unit #xff)))))
  (str.in.re |0 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |0 Fill 3| (seq.unit #x3d)))
(assert (>= (str.len |0 Fill 2|) (- 2)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x00) (seq.unit #x09))
                     (re.range (seq.unit #x0b) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1))))
  (str.in.re (str.substr |0 Fill 5| 0 (+ 2 (str.len |0 Fill 2|))) a!2))))
(assert (= |0 Fill 5|
   (str.++ (seq.unit #x2d) (seq.unit #x2d) |0 Fill 2| (seq.unit #x3d))))
(assert (= (select Constructed_Argument 0)
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           |0 Fill 2|
           (seq.unit #x3d)
           |0 Fill 4|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x00) (seq.unit #x09))
                     (re.range (seq.unit #x0b) (seq.unit #xff)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  (re.* (re.range (seq.unit #x00) (seq.unit #xff))))))
  (str.in.re (select Constructed_Argument 0) a!2))))
(assert IsMatch_/^--.+=/_0)
(assert (= |1 Fill 0| (seq.unit #x2d)))
(assert (= |1 Fill 1| (seq.unit #x2d)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x3d)))
                     (re.range (seq.unit #x00) (seq.unit #xff)))))
  (str.in.re |1 Fill 2| (re.++ a!1 (re.* a!1)))))
(assert (= |1 Fill 3| (seq.unit #x3d)))
(assert (let ((a!1 (re.* (re.union (str.to.re (seq.unit #x73))
                           (str.to.re (seq.unit #x53))))))
  (str.in.re |1 Fill 4| a!1)))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x3d)))
                     (re.range (seq.unit #x00) (seq.unit #xff))))
      (a!2 (re.* (re.union (str.to.re (seq.unit #x73))
                           (str.to.re (seq.unit #x53))))))
  (str.in.re (str.++ |1 Fill 2| (seq.unit #x3d) |1 Fill 4|)
             (re.++ a!1 (re.* a!1) (str.to.re (seq.unit #x3d)) a!2))))
(assert (= |1 Fill 5|
   (str.++ (seq.unit #x2d)
           (seq.unit #x2d)
           |1 Fill 2|
           (seq.unit #x3d)
           |1 Fill 4|)))
(assert (= |1 Fill 6| |1 Fill 2|))
(assert (= |1 Fill 7| |1 Fill 4|))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x3d)))
                     (re.range (seq.unit #x00) (seq.unit #xff))))
      (a!2 (re.* (re.union (str.to.re (seq.unit #x73))
                           (str.to.re (seq.unit #x53))))))
(let ((a!3 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  a!2)))
  (or (not (str.in.re (select Constructed_Argument 0) a!3))
      (= (select Constructed_Argument 0) |1 Fill 5|)))))
(assert (let ((a!1 (re.inter (re.comp (str.to.re (seq.unit #x3d)))
                     (re.range (seq.unit #x00) (seq.unit #xff))))
      (a!2 (re.* (re.union (str.to.re (seq.unit #x73))
                           (str.to.re (seq.unit #x53))))))
(let ((a!3 (re.++ (str.to.re (str.++ (seq.unit #x2d) (seq.unit #x2d)))
                  a!1
                  (re.* a!1)
                  (str.to.re (seq.unit #x3d))
                  a!2)))
  (= (str.in.re (select Constructed_Argument 0) a!3)
     |IsMatch_/^--([^=]+)=([\\s\\S]*)$/_1|))))
(assert |IsMatch_/^--([^=]+)=([\\s\\S]*)$/_1|)
(assert (not (= "" (select Constructed_Argument 0))))
(assert (= |2 Fill 0| (str.++ (seq.unit #x30) (seq.unit #x78))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
  (str.in.re |2 Fill 1| (re.++ a!1 (re.* a!1)))))
(assert (= |2 Fill 2| (str.++ (seq.unit #x30) (seq.unit #x78) |2 Fill 1|)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (or (not (str.in.re |1 Fill 4| a!2)) (= |1 Fill 4| |2 Fill 2|)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (= (str.in.re |1 Fill 4| a!2) |IsMatch_/^0x[0-9a-f]+$/i_2|))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x66)))))
(let ((a!2 (re.++ (str.to.re (str.++ (seq.unit #x30) (seq.unit #x78)))
                  a!1
                  (re.* a!1))))
  (str.in.re |1 Fill 4| a!2))))

(check-sat)