(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (= |0 Fill 0| "&"))
(assert (= |0 Fill 3| "&"))
(assert (let ((a!1 (str.in.re (ite (<= (str.len Constructed_Argument) 0)
                           ""
                           Constructed_Argument)
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "&")
                             (re.* (re.range "\x00" "\xff")))))
      (a!2 (= (ite (<= (str.len Constructed_Argument) 0)
                   ""
                   Constructed_Argument)
              (str.++ |0 Fill 1| "&" |0 Fill 2|))))
  (or (not a!1) a!2)))
(assert (let ((a!1 (str.in.re (ite (<= (str.len Constructed_Argument) 0)
                           ""
                           Constructed_Argument)
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "&")
                             (re.* (re.range "\x00" "\xff"))))))
  (= a!1 IsMatch_/&/_0)))
(assert (not IsMatch_/&/_0))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "]="
                        0)))
  (= (to_real a!1) (- 1.0))))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "="
                        0)))
  (not (= (to_real a!1) (- 1.0)))))

(check-sat)
