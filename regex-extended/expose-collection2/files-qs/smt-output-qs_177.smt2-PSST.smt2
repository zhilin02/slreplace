(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |IsMatch_/BS+/_1| () Bool)
(declare-fun |IsMatch_/BS+/_2| () Bool)
(declare-fun |IsMatch_/BS+/_3| () Bool)
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (let ((re!1 (str.to.re "+"))) and))
(assert (str.in.re (str.substr (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) 0 (to_int (ite (>= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0))) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (to_real (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument))))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))))
(assert |IsMatch_/BS+/_1|)
(assert (= (str.in.re (str.++ (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|)) (- 1)) "" (str.substr (str.substr (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) 0 (to_int (ite (>= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0))) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (to_real (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument))))))) 0 (ite (<= (str.len |1 Fill 2|) (- 1)) (+ 1 (str.len |1 Fill 1|) (str.len |1 Fill 2|)) (str.len |1 Fill 1|)))) " " (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|) (* (- 1) (ite (>= (str.len |1 Fill 1|) (- 1)) (+ 1 (str.len |1 Fill 1|)) (ite (>= (+ (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) 0)))) (- 1)) "" (str.substr (str.substr (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) 0 (to_int (ite (>= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0))) (+ 1.0 (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (to_real (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument))))))) (ite (>= (str.len |1 Fill 1|) (- 1)) (+ 1 (str.len |1 Fill 1|)) (ite (>= (+ (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) 0)) (+ 1 (str.len |1 Fill 1|) (str.len |1 Fill 2|) (* (- 1) (ite (>= (str.len |1 Fill 1|) (- 1)) (+ 1 (str.len |1 Fill 1|)) (ite (>= (+ (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) 0))))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))) |IsMatch_/BS+/_2|))
(assert (not |IsMatch_/BS+/_2|))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0))) (= (str.substr (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (to_int (ite (>= (to_real a!1) (- 2.0)) (+ 2.0 (to_real a!1)) (+ 2.0 (to_real a!1) (to_real (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument)))))) (+ (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument)) (to_int (* (- 1.0) (ite (>= (to_real a!1) (- 2.0)) (+ 2.0 (to_real a!1)) (+ 2.0 (to_real a!1) (to_real (str.len (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument))))))))) "")))
(assert (not |IsMatch_/BS+/_3|))
(assert (not (<= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "[]=" 0)) (- 1.0))))
(check-sat)
