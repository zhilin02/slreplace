(set-option :parse-transducers true)
(define-funs-rec ((MatchTD_1_1main ((x String) (y String)) Bool) (MatchTD_1_1s0a ((x String) (y String)) Bool)) ((and (not (= x "")) (= (str.head_code x) (str.to_code "\+")) (MatchTD_1_1s0a (str.tail x) y)) (or (and (= x "") (= y "")))))
(define-funs-rec ((MatchTD_0_1main ((x String) (y String)) Bool) (MatchTD_0_1mainemptyos0a ((x String) (y String)) Bool) (MatchTD_0_1mainWildomain ((x String) (y String)) Bool) (MatchTD_0_1s0a ((x String) (y String)) Bool) (MatchTD_0_1s5i ((x String) (y String)) Bool) (MatchTD_0_1s5iWildcs5i ((x String) (y String)) Bool) (MatchTD_0_1s5iemptycs4a ((x String) (y String)) Bool) (MatchTD_0_1s2a ((x String) (y String)) Bool) (MatchTD_0_1s3a ((x String) (y String)) Bool) (MatchTD_0_1s4a ((x String) (y String)) Bool)) ((or (MatchTD_0_1mainemptyos0a x y) (and (not (exists ((z String)) (MatchTD_0_1mainemptyos0a x z))) (MatchTD_0_1mainWildomain x y))) (MatchTD_0_1s0a x y) (and (not (= x "")) (MatchTD_0_1main (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "&")) (MatchTD_0_1s2a (str.tail x) y)) (or (MatchTD_0_1s5iWildcs5i x y) (and (not (exists ((z String)) (MatchTD_0_1s5iWildcs5i x z))) (MatchTD_0_1s5iemptycs4a x y))) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_1s5i (str.tail x) (str.tail y))) (MatchTD_0_1s4a x y) (MatchTD_0_1s5i x y) (or (and (= x "") (= y ""))) (MatchTD_0_1s3a x y)))
(define-funs-rec ((MatchTD_0_2main ((x String) (y String)) Bool) (MatchTD_0_2s2i ((x String) (y String)) Bool) (MatchTD_0_2s2iemptycs1a ((x String) (y String)) Bool) (MatchTD_0_2s2iWildcs2i ((x String) (y String)) Bool) (MatchTD_0_2s1a ((x String) (y String)) Bool) (MatchTD_0_2s0a ((x String) (y String)) Bool) (MatchTD_0_2s4a ((x String) (y String)) Bool) (MatchTD_0_2s3a ((x String) (y String)) Bool) (MatchTD_0_2s3aWildos3a ((x String) (y String)) Bool) (MatchTD_0_2s3aemptyos4a ((x String) (y String)) Bool)) ((MatchTD_0_2s2i x y) (or (MatchTD_0_2s2iemptycs1a x y) (and (not (exists ((z String)) (MatchTD_0_2s2iemptycs1a x z))) (MatchTD_0_2s2iWildcs2i x y))) (MatchTD_0_2s1a x y) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_2s2i (str.tail x) (str.tail y))) (MatchTD_0_2s0a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "&")) (MatchTD_0_2s3a (str.tail x) y)) (or (and (= x "") (= y ""))) (or (MatchTD_0_2s3aWildos3a x y) (and (not (exists ((z String)) (MatchTD_0_2s3aWildos3a x z))) (MatchTD_0_2s3aemptyos4a x y))) (and (not (= x "")) (MatchTD_0_2s3a (str.tail x) y)) (MatchTD_0_2s4a x y)))
(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun IsMatch_/&/_1 () Bool)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun |IsMatch_/BS+/_2| () Bool)
(declare-fun |IsMatch_/BS+/_3| () Bool)
(declare-fun |IsMatch_/BS+/_4| () Bool)
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (MatchTD_0_2main (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) |0 Fill 1|))
(assert (MatchTD_0_1main (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) |0 Fill 2|))
(assert (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_0)
(assert (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))))
(assert |IsMatch_/BS+/_2|)
(assert |IsMatch_/BS+/_3|)
(assert (str.in.re (str.++ |3 Fill 1| "+" |3 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!2 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1)) "" (str.substr (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) 0 (ite (<= (str.len |2 Fill 2|) (- 1)) (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (str.len |2 Fill 1|)))))) (let ((a!6 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0)))) (- 1)) "" (str.substr (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0)) (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0)))))))) (= (str.in.re (str.++ (ite (<= (+ (str.len a!2) (str.len a!6)) (- 1)) "" (str.substr (str.++ a!2 " " a!6) 0 (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) (str.len a!2)) (* (- 1) (str.len a!6))) 1) (+ 1 (str.len a!2) (str.len a!6)) (str.len |3 Fill 1|)))) " " (ite (<= (+ (str.len a!2) (str.len a!6) (* (- 1) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) (- 2)) (+ 2 (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) 0)))) (- 1)) "" (str.substr (str.++ a!2 " " a!6) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) (- 2)) (+ 2 (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) 0)) (+ 1 (str.len a!2) (str.len a!6) (* (- 1) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) (- 2)) (+ 2 (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) 0))))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))) |IsMatch_/BS+/_4|))))
(assert (let ((a!2 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1)) 0 (ite (<= (str.len |2 Fill 2|) (- 1)) (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (str.len |2 Fill 1|)))) (a!9 (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))))) (let ((a!13 (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (str.len |2 Fill 1|) (str.len a!9)) (- 1)) (+ 1 (str.len |2 Fill 1|) (str.len a!9)) 0)))) (let ((a!7 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0)))) (- 1)) 0 (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) (ite (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)) (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0))))))) (str.in.re (str.++ (ite (<= (+ a!2 a!7) (- 1)) "" (str.substr (str.++ (ite (<= (str.len a!9) 0) "" (str.substr a!9 0 (ite (>= (+ (str.len |2 Fill 1|) (* (- 1) (str.len a!9))) 0) (str.len a!9) (str.len |2 Fill 1|)))) " " (ite (<= (+ (str.len a!9) (* (- 1) a!13)) 0) "" (str.substr a!9 a!13 (+ (str.len a!9) (* (- 1) a!13))))) 0 (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) a!2) (* (- 1) a!7)) 1) (+ 1 a!2 a!7) (str.len |3 Fill 1|)))) " " (ite (<= (+ a!2 a!7 (* (- 1) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) a!2 a!7) (- 2)) (+ 2 (str.len |3 Fill 1|) a!2 a!7) 0)))) (- 1)) "" (str.substr (str.++ (ite (<= (str.len a!9) 0) "" (str.substr a!9 0 (ite (>= (+ (str.len |2 Fill 1|) (* (- 1) (str.len a!9))) 0) (str.len a!9) (str.len |2 Fill 1|)))) " " (ite (<= (+ (str.len a!9) (* (- 1) a!13)) 0) "" (str.substr a!9 a!13 (+ (str.len a!9) (* (- 1) a!13))))) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) a!2 a!7) (- 2)) (+ 2 (str.len |3 Fill 1|) a!2 a!7) 0)) (+ 1 a!2 a!7 (* (- 1) (ite (>= (str.len |3 Fill 1|) (- 1)) (+ 1 (str.len |3 Fill 1|)) (ite (>= (+ (str.len |3 Fill 1|) a!2 a!7) (- 2)) (+ 2 (str.len |3 Fill 1|) a!2 a!7) 0))))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff"))))))))
(check-sat)
