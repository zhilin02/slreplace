(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun IsMatch_/&/_1 () Bool)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun |IsMatch_/\\+/_2| () Bool)
(declare-fun |3 Fill 0| () String)
(declare-fun |3 Fill 3| () String)
(declare-fun |3 Fill 2| () String)
(declare-fun |3 Fill 1| () String)
(declare-fun |IsMatch_/\\+/_3| () Bool)
(declare-fun |4 Fill 0| () String)
(declare-fun |4 Fill 3| () String)
(declare-fun |4 Fill 2| () String)
(declare-fun |4 Fill 1| () String)
(declare-fun |IsMatch_/\\+/_4| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (= |0 Fill 0| "&"))
(assert (= |0 Fill 3| "&"))
(assert (= (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument)
   (str.++ |0 Fill 1| "&" |0 Fill 2|)))
(assert (str.in.re (str.++ |0 Fill 1| "&" |0 Fill 2|)
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "&")
                  (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_0)
(assert (= |1 Fill 0| "&"))
(assert (= |1 Fill 3| "&"))
(assert (not IsMatch_/&/_1))
(assert (let ((a!1 (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|))
                    (- 1))
                (+ 1 (str.len Constructed_Argument) (str.len |0 Fill 1|))
                0)))
(let ((a!2 (ite (>= (str.len |0 Fill 1|) (- 1)) (+ 1 (str.len |0 Fill 1|)) a!1)))
(let ((a!3 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) a!2)) 0)
                ""
                (str.substr Constructed_Argument
                            a!2
                            (+ (str.len Constructed_Argument) (* (- 1) a!2))))))
(let ((a!4 (str.in.re a!3
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "&")
                             (re.* (re.range "\x00" "\xff"))))))
  (not a!4))))))
(assert (= (to_real (str.indexof (str.++ |2 Fill 1| "+" |2 Fill 2|) "]=" 0)) (- 1.0)))
(assert (= (to_real (str.indexof (str.++ |2 Fill 1| "+" |2 Fill 2|) "=" 0)) (- 1.0)))
(assert (= |2 Fill 0| "+"))
(assert (= |2 Fill 3| "+"))
(assert (let ((a!1 (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|)))
               0)))
(let ((a!2 (ite (<= (str.len Constructed_Argument) 0)
                ""
                (str.substr Constructed_Argument
                            0
                            (ite a!1
                                 (str.len Constructed_Argument)
                                 (str.len |0 Fill 1|))))))
  (= a!2 (str.++ |2 Fill 1| "+" |2 Fill 2|)))))
(assert (str.in.re (str.++ |2 Fill 1| "+" |2 Fill 2|)
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "+")
                  (re.* (re.range "\x00" "\xff")))))
(assert |IsMatch_/\\+/_2|)
(assert (= |3 Fill 0| "+"))
(assert (= |3 Fill 3| "+"))
(assert (let ((a!1 (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|)))
               0)))
(let ((a!2 (str.len (str.substr Constructed_Argument
                                0
                                (ite a!1
                                     (str.len Constructed_Argument)
                                     (str.len |0 Fill 1|))))))
(let ((a!3 (* (- 1) (ite (<= (str.len Constructed_Argument) 0) 0 a!2)))
      (a!6 (+ (str.len |2 Fill 1|)
              (ite (<= (str.len Constructed_Argument) 0) 0 a!2)))
      (a!7 (+ 1
              (str.len |2 Fill 1|)
              (ite (<= (str.len Constructed_Argument) 0) 0 a!2))))
(let ((a!4 (ite (>= (+ (str.len |2 Fill 1|) a!3) 0)
                (ite (<= (str.len Constructed_Argument) 0) 0 a!2)
                (str.len |2 Fill 1|)))
      (a!8 (ite (>= (str.len |2 Fill 1|) (- 1))
                (+ 1 (str.len |2 Fill 1|))
                (ite (>= a!6 (- 1)) a!7 0))))
(let ((a!5 (ite (or (<= (str.len Constructed_Argument) 0) (<= a!2 0))
                ""
                (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|) 0 a!4)))
      (a!9 (+ (ite (<= (str.len Constructed_Argument) 0) 0 a!2) (* (- 1) a!8))))
(let ((a!10 (str.++ a!5
                    " "
                    (ite (<= a!9 0)
                         ""
                         (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|) a!8 a!9)))))
  (= a!10 (str.++ |3 Fill 1| "+" |3 Fill 2|)))))))))
(assert |IsMatch_/\\+/_3|)
(assert (str.in.re (str.++ |3 Fill 1| "+" |3 Fill 2|)
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "+")
                  (re.* (re.range "\x00" "\xff")))))
(assert (= |4 Fill 0| "+"))
(assert (= |4 Fill 3| "+"))
(assert (let ((a!1 (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                       0
                       (ite (<= (str.len |2 Fill 2|) (- 1))
                            (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|))
                            (str.len |2 Fill 1|))))
      (a!3 (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2))))
(let ((a!2 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1))
                0
                (str.len a!1)))
      (a!4 (ite a!3 (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0))
      (a!9 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1)) "" a!1)))
(let ((a!5 (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) a!4)))
(let ((a!6 (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) a!5))
               (- 1)))
      (a!7 (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                       a!5
                       (+ 1
                          (str.len |2 Fill 1|)
                          (str.len |2 Fill 2|)
                          (* (- 1) a!5)))))
(let ((a!8 (<= (+ a!2 (ite a!6 0 (str.len a!7))) (- 1)))
      (a!10 (+ (str.len |3 Fill 1|)
               (* (- 1) a!2)
               (* (- 1) (ite a!6 0 (str.len a!7)))))
      (a!13 (>= (+ (str.len |3 Fill 1|) a!2 (ite a!6 0 (str.len a!7))) (- 2))))
(let ((a!11 (ite (>= a!10 1)
                 (+ 1 a!2 (ite a!6 0 (str.len a!7)))
                 (str.len |3 Fill 1|)))
      (a!14 (ite a!13
                 (+ 2 (str.len |3 Fill 1|) a!2 (ite a!6 0 (str.len a!7)))
                 0)))
(let ((a!12 (ite a!8 "" (str.substr (str.++ a!9 " " (ite a!6 "" a!7)) 0 a!11)))
      (a!15 (ite (>= (str.len |3 Fill 1|) (- 1))
                 (+ 1 (str.len |3 Fill 1|))
                 a!14)))
(let ((a!16 (<= (+ a!2 (ite a!6 0 (str.len a!7)) (* (- 1) a!15)) (- 1)))
      (a!17 (str.substr (str.++ a!9 " " (ite a!6 "" a!7))
                        a!15
                        (+ 1 a!2 (ite a!6 0 (str.len a!7)) (* (- 1) a!15)))))
(let ((a!18 (str.in.re (str.++ a!12 " " (ite a!16 "" a!17))
                       (re.++ (re.* (re.range "\x00" "\xff"))
                              (str.to.re "+")
                              (re.* (re.range "\x00" "\xff"))))))
  (or (not a!18)
      (= (str.++ a!12 " " (ite a!16 "" a!17))
         (str.++ |4 Fill 1| "+" |4 Fill 2|)))))))))))))
(assert (let ((a!1 (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                       0
                       (ite (<= (str.len |2 Fill 2|) (- 1))
                            (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|))
                            (str.len |2 Fill 1|))))
      (a!3 (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2))))
(let ((a!2 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1)) "" a!1))
      (a!4 (ite a!3 (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0)))
(let ((a!5 (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) a!4)))
(let ((a!6 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) a!5))
                    (- 1))
                ""
                (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                            a!5
                            (+ 1
                               (str.len |2 Fill 1|)
                               (str.len |2 Fill 2|)
                               (* (- 1) a!5))))))
(let ((a!7 (>= (+ (str.len |3 Fill 1|)
                  (* (- 1) (str.len a!2))
                  (* (- 1) (str.len a!6)))
               1))
      (a!10 (ite (>= (+ (str.len |3 Fill 1|) (str.len a!2) (str.len a!6)) (- 2))
                 (+ 2 (str.len |3 Fill 1|) (str.len a!2) (str.len a!6))
                 0)))
(let ((a!8 (str.substr (str.++ a!2 " " a!6)
                       0
                       (ite a!7
                            (+ 1 (str.len a!2) (str.len a!6))
                            (str.len |3 Fill 1|))))
      (a!11 (ite (>= (str.len |3 Fill 1|) (- 1))
                 (+ 1 (str.len |3 Fill 1|))
                 a!10)))
(let ((a!9 (ite (<= (+ (str.len a!2) (str.len a!6)) (- 1)) "" a!8))
      (a!12 (ite (<= (+ (str.len a!2) (str.len a!6) (* (- 1) a!11)) (- 1))
                 ""
                 (str.substr (str.++ a!2 " " a!6)
                             a!11
                             (+ 1 (str.len a!2) (str.len a!6) (* (- 1) a!11))))))
(let ((a!13 (str.in.re (str.++ a!9 " " a!12)
                       (re.++ (re.* (re.range "\x00" "\xff"))
                              (str.to.re "+")
                              (re.* (re.range "\x00" "\xff"))))))
  (= a!13 |IsMatch_/\\+/_4|))))))))))
(assert (let ((a!1 (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                       0
                       (ite (<= (str.len |2 Fill 2|) (- 1))
                            (+ 1 (str.len |2 Fill 1|) (str.len |2 Fill 2|))
                            (str.len |2 Fill 1|))))
      (a!3 (>= (+ (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) (- 2)))
      (a!8 (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|)))
               0)))
(let ((a!2 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|)) (- 1))
                0
                (str.len a!1)))
      (a!4 (ite a!3 (+ 2 (* 2 (str.len |2 Fill 1|)) (str.len |2 Fill 2|)) 0))
      (a!9 (ite (<= (str.len Constructed_Argument) 0)
                ""
                (str.substr Constructed_Argument
                            0
                            (ite a!8
                                 (str.len Constructed_Argument)
                                 (str.len |0 Fill 1|))))))
(let ((a!5 (ite (>= (str.len |2 Fill 1|) (- 1)) (+ 1 (str.len |2 Fill 1|)) a!4))
      (a!10 (>= (+ (str.len |2 Fill 1|) (* (- 1) (str.len a!9))) 0))
      (a!12 (ite (>= (+ (str.len |2 Fill 1|) (str.len a!9)) (- 1))
                 (+ 1 (str.len |2 Fill 1|) (str.len a!9))
                 0)))
(let ((a!6 (str.len (str.substr (str.++ |2 Fill 1| "+" |2 Fill 2|)
                                a!5
                                (+ 1
                                   (str.len |2 Fill 1|)
                                   (str.len |2 Fill 2|)
                                   (* (- 1) a!5)))))
      (a!11 (ite (<= (str.len a!9) 0)
                 ""
                 (str.substr a!9
                             0
                             (ite a!10 (str.len a!9) (str.len |2 Fill 1|)))))
      (a!13 (ite (>= (str.len |2 Fill 1|) (- 1))
                 (+ 1 (str.len |2 Fill 1|))
                 a!12)))
(let ((a!7 (ite (<= (+ (str.len |2 Fill 1|) (str.len |2 Fill 2|) (* (- 1) a!5))
                    (- 1))
                0
                a!6))
      (a!14 (ite (<= (+ (str.len a!9) (* (- 1) a!13)) 0)
                 ""
                 (str.substr a!9 a!13 (+ (str.len a!9) (* (- 1) a!13))))))
(let ((a!15 (ite (>= (+ (str.len |3 Fill 1|) (* (- 1) a!2) (* (- 1) a!7)) 1)
                 (+ 1 a!2 a!7)
                 (str.len |3 Fill 1|)))
      (a!16 (ite (>= (+ (str.len |3 Fill 1|) a!2 a!7) (- 2))
                 (+ 2 (str.len |3 Fill 1|) a!2 a!7)
                 0)))
(let ((a!17 (ite (>= (str.len |3 Fill 1|) (- 1))
                 (+ 1 (str.len |3 Fill 1|))
                 a!16)))
(let ((a!18 (ite (<= (+ a!2 a!7 (* (- 1) a!17)) (- 1))
                 ""
                 (str.substr (str.++ a!11 " " a!14)
                             a!17
                             (+ 1 a!2 a!7 (* (- 1) a!17))))))
(let ((a!19 (str.++ (ite (<= (+ a!2 a!7) (- 1))
                         ""
                         (str.substr (str.++ a!11 " " a!14) 0 a!15))
                    " "
                    a!18)))
  (str.in.re a!19
             (re.++ (re.* (re.range "\x00" "\xff"))
                    (str.to.re "+")
                    (re.* (re.range "\x00" "\xff"))))))))))))))

(check-sat)
