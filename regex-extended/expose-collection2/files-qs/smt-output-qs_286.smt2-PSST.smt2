(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun IsMatch_/&/_1 () Bool)
(declare-fun IsMatch_/&/_2 () Bool)
(declare-fun |IsMatch_/BS+/_3| () Bool)
(declare-fun |IsMatch_/BS+/_4| () Bool)
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert CreateAsClass)
(assert (not (= Constructed_Argument "")))
(assert (let ((re!1 (re.++ ((_ re.capture 1) (re.* (str.to.re "."))) (re.++ (str.to.re "&") ((_ re.capture 2) (re.* (str.to.re "."))))))) (and (= |0 Fill 1| ((_ str.extract 1) (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) re!1)) (= |0 Fill 2| ((_ str.extract 2) (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) re!1)))))
(assert (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_0)
(assert IsMatch_/&/_1)
(assert (str.in.re (str.++ |1 Fill 1| "&" |1 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert (not IsMatch_/&/_2))
(assert (not (str.in.re (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) 0)))) 0) "" (str.substr Constructed_Argument (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) 0)) (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) (- 2)) (+ 2 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|)) 0)))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff"))))))
(assert (= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) "]=" 0)) (- 1.0)))
(assert (not (= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) "=" 0)) (- 1.0))))
(assert (not |IsMatch_/BS+/_3|))
(assert (let ((a!2 (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))))) (not (str.in.re (str.substr a!2 0 (ite (>= (str.indexof a!2 "=" 0) 0) (str.indexof a!2 "=" 0) (+ (ite (<= (str.len Constructed_Argument) 0) 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|))) (str.indexof a!2 "=" 0)))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))))))
(assert (let ((a!1 (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0))) (let ((a!2 (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite a!1 (str.len Constructed_Argument) (str.len |0 Fill 1|)))))) (not (= (str.substr a!2 (to_int (ite (>= (to_real (str.indexof a!2 "=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof a!2 "=" 0))) (+ 1.0 (to_real (str.indexof a!2 "=" 0)) (to_real (ite (<= (str.len Constructed_Argument) 0) 0 (ite a!1 (str.len Constructed_Argument) (str.len |0 Fill 1|))))))) (+ (ite (<= (str.len Constructed_Argument) 0) 0 (ite a!1 (str.len Constructed_Argument) (str.len |0 Fill 1|))) (to_int (* (- 1.0) (ite (>= (to_real (str.indexof a!2 "=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof a!2 "=" 0))) (+ 1.0 (to_real (str.indexof a!2 "=" 0)) (to_real (ite (<= (str.len Constructed_Argument) 0) 0 (ite a!1 (str.len Constructed_Argument) (str.len |0 Fill 1|)))))))))) "")))))
(assert (let ((a!2 (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))))) (= (str.in.re (str.substr a!2 (to_int (ite (>= (to_real (str.indexof a!2 "=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof a!2 "=" 0))) (+ 1.0 (to_real (str.indexof a!2 "=" 0)) (to_real (str.len a!2))))) (+ (str.len a!2) (to_int (* (- 1.0) (ite (>= (to_real (str.indexof a!2 "=" 0)) (- 1.0)) (+ 1.0 (to_real (str.indexof a!2 "=" 0))) (+ 1.0 (to_real (str.indexof a!2 "=" 0)) (to_real (str.len a!2)))))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))) |IsMatch_/BS+/_4|)))
(assert (not |IsMatch_/BS+/_4|))
(assert (not (<= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" (str.substr Constructed_Argument 0 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (str.len |0 Fill 1|))) 0) (str.len Constructed_Argument) (str.len |0 Fill 1|)))) "[]=" 0)) (- 1.0))))
(check-sat)
