(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |IsMatch_/\\+/_1| () Bool)
(declare-fun |2 Fill 0| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |IsMatch_/\\+/_2| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (= |0 Fill 0| "&"))
(assert (= |0 Fill 3| "&"))
(assert (let ((a!1 (str.in.re (ite (<= (str.len Constructed_Argument) 0)
                           ""
                           Constructed_Argument)
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "&")
                             (re.* (re.range "\x00" "\xff"))))))
  (not a!1)))
(assert (not IsMatch_/&/_0))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "]="
                        0)))
  (not (= (to_real a!1) (- 1.0)))))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "]="
                        0)))
  (not (= (to_real a!1) (- 2.0)))))
(assert (= |1 Fill 0| "+"))
(assert (= |1 Fill 3| "+"))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "]="
                        0))
      (a!2 (str.len (ite (<= (str.len Constructed_Argument) 0)
                         ""
                         Constructed_Argument))))
(let ((a!3 (to_int (ite (>= (to_real a!1) (- 1.0))
                        (+ 1.0 (to_real a!1))
                        (+ 1.0 (to_real a!1) (to_real a!2))))))
(let ((a!4 (str.substr (ite (<= (str.len Constructed_Argument) 0)
                            ""
                            Constructed_Argument)
                       0
                       a!3)))
  (= a!4 (str.++ |1 Fill 1| "+" |1 Fill 2|))))))
(assert (str.in.re (str.++ |1 Fill 1| "+" |1 Fill 2|)
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "+")
                  (re.* (re.range "\x00" "\xff")))))
(assert |IsMatch_/\\+/_1|)
(assert (= |2 Fill 0| "+"))
(assert (= |2 Fill 3| "+"))
(assert (let ((a!1 (str.substr (str.++ |1 Fill 1| "+" |1 Fill 2|)
                       0
                       (ite (<= (str.len |1 Fill 2|) (- 1))
                            (+ 1 (str.len |1 Fill 1|) (str.len |1 Fill 2|))
                            (str.len |1 Fill 1|))))
      (a!3 (>= (+ (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) (- 2))))
(let ((a!2 (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|)) (- 1)) "" a!1))
      (a!4 (ite a!3 (+ 2 (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) 0)))
(let ((a!5 (ite (>= (str.len |1 Fill 1|) (- 1)) (+ 1 (str.len |1 Fill 1|)) a!4)))
(let ((a!6 (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|) (* (- 1) a!5))
                    (- 1))
                ""
                (str.substr (str.++ |1 Fill 1| "+" |1 Fill 2|)
                            a!5
                            (+ 1
                               (str.len |1 Fill 1|)
                               (str.len |1 Fill 2|)
                               (* (- 1) a!5))))))
(let ((a!7 (str.in.re (str.++ a!2 " " a!6)
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "+")
                             (re.* (re.range "\x00" "\xff"))))))
  (or (not a!7) (= (str.++ a!2 " " a!6) (str.++ |2 Fill 1| "+" |2 Fill 2|)))))))))
(assert (let ((a!1 (str.substr (str.++ |1 Fill 1| "+" |1 Fill 2|)
                       0
                       (ite (<= (str.len |1 Fill 2|) (- 1))
                            (+ 1 (str.len |1 Fill 1|) (str.len |1 Fill 2|))
                            (str.len |1 Fill 1|))))
      (a!3 (>= (+ (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) (- 2))))
(let ((a!2 (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|)) (- 1)) "" a!1))
      (a!4 (ite a!3 (+ 2 (* 2 (str.len |1 Fill 1|)) (str.len |1 Fill 2|)) 0)))
(let ((a!5 (ite (>= (str.len |1 Fill 1|) (- 1)) (+ 1 (str.len |1 Fill 1|)) a!4)))
(let ((a!6 (ite (<= (+ (str.len |1 Fill 1|) (str.len |1 Fill 2|) (* (- 1) a!5))
                    (- 1))
                ""
                (str.substr (str.++ |1 Fill 1| "+" |1 Fill 2|)
                            a!5
                            (+ 1
                               (str.len |1 Fill 1|)
                               (str.len |1 Fill 2|)
                               (* (- 1) a!5))))))
(let ((a!7 (str.in.re (str.++ a!2 " " a!6)
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "+")
                             (re.* (re.range "\x00" "\xff"))))))
  (= a!7 |IsMatch_/\\+/_2|)))))))
(assert (not |IsMatch_/\\+/_2|))
(assert (let ((a!1 (str.indexof (ite (<= (str.len Constructed_Argument) 0)
                             ""
                             Constructed_Argument)
                        "]="
                        0))
      (a!2 (str.len (ite (<= (str.len Constructed_Argument) 0)
                         ""
                         Constructed_Argument))))
(let ((a!3 (ite (>= (to_real a!1) (- 2.0))
                (+ 2.0 (to_real a!1))
                (+ 2.0 (to_real a!1) (to_real a!2)))))
(let ((a!4 (str.substr (ite (<= (str.len Constructed_Argument) 0)
                            ""
                            Constructed_Argument)
                       (to_int a!3)
                       (+ a!2 (to_int (* (- 1.0) a!3))))))
  (not (= a!4 ""))))))

(check-sat)
