(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun |IsMatch_/BS+/_1| () Bool)
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert CreateAsClass)
(assert (not (= Constructed_Argument "")))
(assert (= (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))) IsMatch_/&/_0))
(assert (not IsMatch_/&/_0))
(assert (= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "]=" 0)) (- 1.0)))
(assert (= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "=" 0)) (- 1.0)))
(assert (= (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "+") (re.* (re.range "\x00" "\xff")))) |IsMatch_/BS+/_1|))
(assert (not |IsMatch_/BS+/_1|))
(assert (not (<= (to_real (str.indexof (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) "[]=" 0)) (- 1.0))))
(check-sat)
