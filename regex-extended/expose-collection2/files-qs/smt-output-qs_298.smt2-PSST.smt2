(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun IsMatch_/&/_0 () Bool)
(declare-fun IsMatch_/&/_1 () Bool)
(declare-fun IsMatch_/&/_2 () Bool)
(declare-fun IsMatch_/&/_3 () Bool)
(declare-fun IsMatch_/&/_4 () Bool)
(declare-fun IsMatch_/&/_5 () Bool)
(declare-fun IsMatch_/&/_6 () Bool)
(declare-fun IsMatch_/&/_7 () Bool)
(assert (= ExpandObjSwitcher 0.0))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument "")))
(assert (let ((re!1 (re.++ ((_ re.capture 1) (re.* (str.to.re "."))) (re.++ (str.to.re "&") ((_ re.capture 2) (re.* (str.to.re "."))))))) (and (= |0 Fill 1| ((_ str.extract 1) (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) re!1)) (= |0 Fill 2| ((_ str.extract 2) (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) re!1)))))
(assert (str.in.re (ite (<= (str.len Constructed_Argument) 0) "" Constructed_Argument) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_0)
(assert IsMatch_/&/_1)
(assert (str.in.re (str.++ |1 Fill 1| "&" |1 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_2)
(assert (str.in.re (str.++ |2 Fill 1| "&" |2 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_3)
(assert (str.in.re (str.++ |3 Fill 1| "&" |3 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_4)
(assert (str.in.re (str.++ |4 Fill 1| "&" |4 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert IsMatch_/&/_5)
(assert (str.in.re (str.++ |5 Fill 1| "&" |5 Fill 2|) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(assert (= (str.in.re (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) 0)))) 0) "" (str.substr Constructed_Argument (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) 0)) (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) (- 6)) (+ 6 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|)) 0)))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))) IsMatch_/&/_6))
(assert IsMatch_/&/_6)
(assert (= (str.in.re (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)))) 0) "" (str.substr Constructed_Argument (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)) (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))) IsMatch_/&/_7))
(assert (str.in.re (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)))) 0) "" (str.substr Constructed_Argument (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)) (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (ite (>= (+ (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) (- 7)) (+ 7 (str.len Constructed_Argument) (str.len |0 Fill 1|) (str.len |1 Fill 1|) (str.len |2 Fill 1|) (str.len |3 Fill 1|) (str.len |4 Fill 1|) (str.len |5 Fill 1|) (str.len |6 Fill 1|)) 0)))))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "&") (re.* (re.range "\x00" "\xff")))))
(check-sat)
