(set-option :parse-transducers true)
(define-funs-rec ((elimWhiteRightRel ((x String) (y String)) Bool) (elimWhiteRightHelp1 ((x String) (y String)) Bool) (elimWhiteRightHelp2 ((x String) (y String)) Bool)) ((or (and (= x "") (= y "")) (and (elimWhiteRightHelp1 x y)) (and (elimWhiteRightHelp2 x y))) (or (and (not (= x "")) (not (= y "")) (= (str.head x) (str.head y)) (elimWhiteRightHelp1 (str.tail x) (str.tail y))) (and (not (= x "")) (not (= y "")) (not (= (str.head_code x) (str.to_code " "))) (= (str.head x) (str.head y)) (elimWhiteRightHelp2 (str.tail x) (str.tail y)))) (or (and (= x "") (= y "")) (and (not (= x "")) (= (str.head_code x) (str.to_code " ")) (elimWhiteRightHelp2 (str.tail x) y)))))
(define-funs-rec ((elimWhiteLeftRel ((x String) (y String)) Bool) (elimWhiteLeftHelp ((x String) (y String)) Bool)) ((or (and (= x "") (= y "")) (and (not (= x "")) (= (str.head_code x) (str.to_code " ")) (elimWhiteLeftRel (str.tail x) y)) (and (not (= x "")) (not (= y "")) (not (= (str.head_code x) (str.to_code " "))) (= (str.head x) (str.head y)) (elimWhiteLeftHelp (str.tail x) (str.tail y)))) (or (and (= x "") (= y "")) (and (not (= x "")) (not (= y "")) (= (str.head x) (str.head y)) (elimWhiteLeftHelp (str.tail x) (str.tail y))))))
(define-fun elimWhiteRight ((x String)) String (_eps ((y String)) (elimWhiteRightRel x y)))
(define-fun elimWhiteLeft ((x String)) String (_eps ((y String)) (elimWhiteLeftRel x y)))
(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |IsMatch_/^v?(0ST[1-9]BSd*)BS.(0ST[1-9]BSd*)BS.(0ST[1-9]BSd*)(?:-((?:0ST[1-9]BSd*STBSd*[a-zA-Z-][a-zA-Z0-9-]*)(?:BS.(?:0ST[1-9]BSd*STBSd*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:BS+([0-9A-Za-z-]+(?:BS.[0-9A-Za-z-]+)*))?$/_0| () Bool)
(assert (= Constructed_Argument_t (str.++ (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c) (seq.unit #x65) (seq.unit #x61) (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6f) (seq.unit #x62) (seq.unit #x6a) (seq.unit #x65) (seq.unit #x63) (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6d) (seq.unit #x62) (seq.unit #x65) (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x73) (seq.unit #x74) (seq.unit #x72) (seq.unit #x69) (seq.unit #x6e) (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x61) (seq.unit #x72) (seq.unit #x72) (seq.unit #x61) (seq.unit #x79) (seq.unit #x5f) (seq.unit #x62) (seq.unit #x6f) (seq.unit #x6f) (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert (not CreateAsClass))
(assert (<= (to_real (str.len Constructed_Argument)) 256.0))
(assert (let ((a!3 (re.++ (re.range (seq.unit #x31) (seq.unit #x39)) (re.* (re.range (seq.unit #x30) (seq.unit #x39))))) (a!4 (re.union (re.range (seq.unit #x61) (seq.unit #x7a)) (re.range (seq.unit #x41) (seq.unit #x5a)) (str.to.re (seq.unit #x2d))))) (let ((a!5 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4)))) (= (str.in.re (elimWhiteRight (elimWhiteLeft Constructed_Argument)) (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76))) (re.union (str.to.re (seq.unit #x30)) a!3) (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3) (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2d)) (re.union (str.to.re (seq.unit #x30)) a!3 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5)) (re.* (re.++ (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5)))))) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2b)) (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5) (re.* (re.++ (str.to.re (seq.unit #x2e)) (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5))))))) |IsMatch_/^v?(0ST[1-9]BSd*)BS.(0ST[1-9]BSd*)BS.(0ST[1-9]BSd*)(?:-((?:0ST[1-9]BSd*STBSd*[a-zA-Z-][a-zA-Z0-9-]*)(?:BS.(?:0ST[1-9]BSd*STBSd*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:BS+([0-9A-Za-z-]+(?:BS.[0-9A-Za-z-]+)*))?$/_0|))))
(assert (let ((a!3 (re.++ (re.range (seq.unit #x31) (seq.unit #x39)) (re.* (re.range (seq.unit #x30) (seq.unit #x39))))) (a!4 (re.union (re.range (seq.unit #x61) (seq.unit #x7a)) (re.range (seq.unit #x41) (seq.unit #x5a)) (str.to.re (seq.unit #x2d))))) (let ((a!5 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4)))) (str.in.re (elimWhiteRight (elimWhiteLeft Constructed_Argument)) (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76))) (re.union (str.to.re (seq.unit #x30)) a!3) (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3) (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2d)) (re.union (str.to.re (seq.unit #x30)) a!3 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5)) (re.* (re.++ (str.to.re (seq.unit #x2e)) (re.union (str.to.re (seq.unit #x30)) a!3 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5)))))) (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2b)) (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5) (re.* (re.++ (str.to.re (seq.unit #x2e)) (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5))))))))))
(check-sat)
