(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 6| () String)
(declare-fun |0 Fill 7| () String)
(declare-fun |0 Fill 8| () String)
(declare-fun |0 Fill 9| () String)
(declare-fun |0 Fill 10| () String)
(declare-fun |0 Fill 11| () String)
(declare-fun |0 Fill 12| () String)
(declare-fun |0 Fill 13| () String)
(declare-fun |0 Fill 14| () String)
(declare-fun |0 Fill 15| () String)
(declare-fun |0 Fill 16| () String)
(declare-fun |0 Fill 17| () String)
(declare-fun |0 Fill 18| () String)
(declare-fun |0 Fill 19| () String)
(declare-fun |0 Fill 20| () String)
(declare-fun |0 Fill 21| () String)
(declare-fun |0 Fill 22| () String)
(declare-fun |0 Fill 23| () String)
(declare-fun |0 Fill 24| () String)
(declare-fun |0 Fill 25| () String)
(declare-fun |0 Fill 26| () String)
(declare-fun |0 Fill 27| () String)
(declare-fun |0 Fill 28| () String)
(declare-fun |0 Fill 29| () String)
(declare-fun |0 Fill 30| () String)
(declare-fun |0 Fill 31| () String)
(declare-fun |0 Fill 32| () String)
(declare-fun |0 Fill 33| () String)
(declare-fun |0 Fill 34| () String)
(declare-fun |0 Fill 35| () String)
(declare-fun |0 Fill 36| () String)
(declare-fun |0 Fill 37| () String)
(declare-fun |0 Fill 38| () String)
(declare-fun |0 Fill 39| () String)
(declare-fun |0 Fill 40| () String)
(declare-fun |0 Fill 41| () String)
(declare-fun |0 Fill 42| () String)
(declare-fun |IsMatch_/^v?(0\|[1-9]\\d*)\\.(0\|[1-9]\\d*)\\.(0\|[1-9]\\d*)(?:-((?:0\|[1-9]\\d*\|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0\|[1-9]\\d*\|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/_0|
             ()
             Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= Constructed_Argument_t
   (str.++ (seq.unit #x73)
           (seq.unit #x74)
           (seq.unit #x72)
           (seq.unit #x69)
           (seq.unit #x6e)
           (seq.unit #x67))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)
                (seq.unit #x65)
                (seq.unit #x61)
                (seq.unit #x6e)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6f)
                (seq.unit #x62)
                (seq.unit #x6a)
                (seq.unit #x65)
                (seq.unit #x63)
                (seq.unit #x74)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x6e)
                (seq.unit #x75)
                (seq.unit #x6d)
                (seq.unit #x62)
                (seq.unit #x65)
                (seq.unit #x72)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x73)
                (seq.unit #x74)
                (seq.unit #x72)
                (seq.unit #x69)
                (seq.unit #x6e)
                (seq.unit #x67)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x61)
                (seq.unit #x72)
                (seq.unit #x72)
                (seq.unit #x61)
                (seq.unit #x79)
                (seq.unit #x5f)
                (seq.unit #x62)
                (seq.unit #x6f)
                (seq.unit #x6f)
                (seq.unit #x6c)))))
(assert (not (= Constructed_Argument_2_t
        (str.++ (seq.unit #x6e) (seq.unit #x75) (seq.unit #x6c) (seq.unit #x6c)))))
(assert CreateAsClass)
(assert (<= (to_real (str.len Constructed_Argument)) 256.0))
(assert (str.in.re |0 Fill 0| (re.union (str.to.re "") (str.to.re (seq.unit #x76)))))
(assert (= |0 Fill 1| (seq.unit #x30)))
(assert (str.in.re |0 Fill 2| (re.range (seq.unit #x31) (seq.unit #x39))))
(assert (str.in.re |0 Fill 3| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (or (= |0 Fill 4| (seq.unit #x30))
    (= |0 Fill 4| (str.++ |0 Fill 2| |0 Fill 3|))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |0 Fill 4| (re.union (str.to.re (seq.unit #x30)) a!1))))
(assert (= |0 Fill 5| (seq.unit #x2e)))
(assert (= |0 Fill 6| (seq.unit #x30)))
(assert (str.in.re |0 Fill 7| (re.range (seq.unit #x31) (seq.unit #x39))))
(assert (str.in.re |0 Fill 8| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (or (= |0 Fill 9| (seq.unit #x30))
    (= |0 Fill 9| (str.++ |0 Fill 7| |0 Fill 8|))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |0 Fill 9| (re.union (str.to.re (seq.unit #x30)) a!1))))
(assert (= |0 Fill 10| (seq.unit #x2e)))
(assert (= |0 Fill 11| (seq.unit #x30)))
(assert (str.in.re |0 Fill 12| (re.range (seq.unit #x31) (seq.unit #x39))))
(assert (str.in.re |0 Fill 13| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (or (= |0 Fill 14| (seq.unit #x30))
    (= |0 Fill 14| (str.++ |0 Fill 12| |0 Fill 13|))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39))))))
  (str.in.re |0 Fill 14| (re.union (str.to.re (seq.unit #x30)) a!1))))
(assert (= |0 Fill 15| (seq.unit #x2d)))
(assert (= |0 Fill 16| (seq.unit #x30)))
(assert (str.in.re |0 Fill 17| (re.range (seq.unit #x31) (seq.unit #x39))))
(assert (str.in.re |0 Fill 18| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (str.in.re |0 Fill 19| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (str.in.re |0 Fill 20|
           (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(assert (let ((a!1 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                           (re.range (seq.unit #x61) (seq.unit #x7a))
                           (re.range (seq.unit #x41) (seq.unit #x5a))
                           (str.to.re (seq.unit #x2d))))))
  (str.in.re |0 Fill 21| a!1)))
(assert (or (= |0 Fill 22| (str.++ |0 Fill 17| |0 Fill 18|))
    (= |0 Fill 22| (str.++ |0 Fill 19| |0 Fill 20| |0 Fill 21|))))
(assert (or (= |0 Fill 23| (seq.unit #x30)) (= |0 Fill 23| |0 Fill 22|)))
(assert (= |0 Fill 24| (seq.unit #x2e)))
(assert (= |0 Fill 25| (seq.unit #x30)))
(assert (str.in.re |0 Fill 26| (re.range (seq.unit #x31) (seq.unit #x39))))
(assert (str.in.re |0 Fill 27| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (str.in.re |0 Fill 28| (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
(assert (str.in.re |0 Fill 29|
           (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(assert (let ((a!1 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                           (re.range (seq.unit #x61) (seq.unit #x7a))
                           (re.range (seq.unit #x41) (seq.unit #x5a))
                           (str.to.re (seq.unit #x2d))))))
  (str.in.re |0 Fill 30| a!1)))
(assert (or (= |0 Fill 31| (str.++ |0 Fill 26| |0 Fill 27|))
    (= |0 Fill 31| (str.++ |0 Fill 28| |0 Fill 29| |0 Fill 30|))))
(assert (or (= |0 Fill 32| (str.++ (seq.unit #x2e) (seq.unit #x30)))
    (= |0 Fill 32| (str.++ (seq.unit #x2e) |0 Fill 31|))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!3 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!2))))
(let ((a!4 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!2 a!3)))
(let ((a!5 (re.++ (str.to.re (seq.unit #x2e))
                  (re.union (str.to.re (seq.unit #x30)) a!1 a!4))))
(let ((a!6 (re.++ (re.union (str.to.re (seq.unit #x30)) a!1 a!4) (re.* a!5))))
  (str.in.re (str.++ |0 Fill 23| |0 Fill 32|) a!6)))))))
(assert (= |0 Fill 33| (seq.unit #x2b)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
  (str.in.re |0 Fill 34| (re.++ a!1 (re.* a!1)))))
(assert (= |0 Fill 35| (seq.unit #x2e)))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
  (str.in.re |0 Fill 36| (re.++ a!1 (re.* a!1)))))
(assert (let ((a!1 (re.union (re.range (seq.unit #x30) (seq.unit #x39))
                     (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!2 (re.* (re.++ (str.to.re (seq.unit #x2e)) (re.++ a!1 (re.* a!1))))))
  (str.in.re (str.++ |0 Fill 34| (seq.unit #x2e) |0 Fill 36|)
             (re.++ (re.++ a!1 (re.* a!1)) a!2)))))
(assert (let ((a!1 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!2 (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!3 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!2))))
(let ((a!4 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!2 a!3))
      (a!7 (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!2) a!3)))
(let ((a!5 (re.++ (str.to.re (seq.unit #x2e))
                  (re.union (str.to.re (seq.unit #x30)) a!1 a!4)))
      (a!8 (re.* (re.++ (str.to.re (seq.unit #x2e)) a!7))))
(let ((a!6 (re.++ (str.to.re (seq.unit #x2d))
                  (re.union (str.to.re (seq.unit #x30)) a!1 a!4)
                  (re.* a!5)))
      (a!9 (re.union (str.to.re "") (re.++ (str.to.re (seq.unit #x2b)) a!7 a!8))))
(let ((a!10 (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76)))
                   (re.union (str.to.re (seq.unit #x30)) a!1)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!1)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!1)
                   (re.union (str.to.re "") a!6)
                   a!9)))
  (str.in.re (str.++ |0 Fill 0|
                     |0 Fill 4|
                     (seq.unit #x2e)
                     |0 Fill 9|
                     (seq.unit #x2e)
                     |0 Fill 14|
                     (seq.unit #x2d)
                     |0 Fill 23|
                     |0 Fill 32|
                     (seq.unit #x2b)
                     |0 Fill 34|
                     (seq.unit #x2e)
                     |0 Fill 36|)
             a!10))))))))
(assert (= |0 Fill 37|
   (str.++ |0 Fill 0|
           |0 Fill 4|
           (seq.unit #x2e)
           |0 Fill 9|
           (seq.unit #x2e)
           |0 Fill 14|
           (seq.unit #x2d)
           |0 Fill 23|
           |0 Fill 32|
           (seq.unit #x2b)
           |0 Fill 34|
           (seq.unit #x2e)
           |0 Fill 36|)))
(assert (= |0 Fill 38| |0 Fill 4|))
(assert (= |0 Fill 39| |0 Fill 9|))
(assert (= |0 Fill 40| |0 Fill 14|))
(assert (= |0 Fill 41| (str.++ |0 Fill 23| |0 Fill 32|)))
(assert (= |0 Fill 42| (str.++ |0 Fill 34| (seq.unit #x2e) |0 Fill 36|)))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (str.len Constructed_Argument)
                          (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0)))))
      (a!3 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!4 (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1)))))
      (a!5 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4))))
(let ((a!6 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5))
      (a!9 (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5)))
(let ((a!7 (re.++ (str.to.re (seq.unit #x2e))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)))
      (a!10 (re.* (re.++ (str.to.re (seq.unit #x2e)) a!9))))
(let ((a!8 (re.++ (str.to.re (seq.unit #x2d))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)
                  (re.* a!7)))
      (a!11 (re.union (str.to.re "")
                      (re.++ (str.to.re (seq.unit #x2b)) a!9 a!10))))
(let ((a!12 (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76)))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (re.union (str.to.re "") a!8)
                   a!11)))
  (or (not (str.in.re a!2 a!12))
      (= a!2
         (str.++ |0 Fill 0|
                 |0 Fill 4|
                 (seq.unit #x2e)
                 |0 Fill 9|
                 (seq.unit #x2e)
                 |0 Fill 14|
                 (seq.unit #x2d)
                 |0 Fill 41|
                 (seq.unit #x2b)
                 |0 Fill 42|))))))))))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (str.len Constructed_Argument)
                          (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0)))))
      (a!3 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!4 (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1)))))
      (a!5 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4))))
(let ((a!6 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5))
      (a!9 (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5)))
(let ((a!7 (re.++ (str.to.re (seq.unit #x2e))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)))
      (a!10 (re.* (re.++ (str.to.re (seq.unit #x2e)) a!9))))
(let ((a!8 (re.++ (str.to.re (seq.unit #x2d))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)
                  (re.* a!7)))
      (a!11 (re.union (str.to.re "")
                      (re.++ (str.to.re (seq.unit #x2b)) a!9 a!10))))
(let ((a!12 (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76)))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (re.union (str.to.re "") a!8)
                   a!11)))
  (= (str.in.re a!2 a!12)
     |IsMatch_/^v?(0\|[1-9]\\d*)\\.(0\|[1-9]\\d*)\\.(0\|[1-9]\\d*)(?:-((?:0\|[1-9]\\d*\|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0\|[1-9]\\d*\|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/_0|))))))))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (str.len Constructed_Argument)
                          (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0)))))
      (a!3 (re.++ (re.range (seq.unit #x31) (seq.unit #x39))
                  (re.* (re.range (seq.unit #x30) (seq.unit #x39)))))
      (a!4 (re.union (re.range (seq.unit #x61) (seq.unit #x7a))
                     (re.range (seq.unit #x41) (seq.unit #x5a))
                     (str.to.re (seq.unit #x2d)))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1)))))
      (a!5 (re.* (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4))))
(let ((a!6 (re.++ (re.* (re.range (seq.unit #x30) (seq.unit #x39))) a!4 a!5))
      (a!9 (re.++ (re.union (re.range (seq.unit #x30) (seq.unit #x39)) a!4) a!5)))
(let ((a!7 (re.++ (str.to.re (seq.unit #x2e))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)))
      (a!10 (re.* (re.++ (str.to.re (seq.unit #x2e)) a!9))))
(let ((a!8 (re.++ (str.to.re (seq.unit #x2d))
                  (re.union (str.to.re (seq.unit #x30)) a!3 a!6)
                  (re.* a!7)))
      (a!11 (re.union (str.to.re "")
                      (re.++ (str.to.re (seq.unit #x2b)) a!9 a!10))))
(let ((a!12 (re.++ (re.union (str.to.re "") (str.to.re (seq.unit #x76)))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (str.to.re (seq.unit #x2e))
                   (re.union (str.to.re (seq.unit #x30)) a!3)
                   (re.union (str.to.re "") a!8)
                   a!11)))
  (str.in.re a!2 a!12))))))))

(check-sat)