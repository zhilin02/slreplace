(set-option :parse-transducers true)
(define-funs-rec ((MatchTD_0_1main ((x String) (y String)) Bool) (MatchTD_0_1mainemptyos0a ((x String) (y String)) Bool) (MatchTD_0_1mainWildomain ((x String) (y String)) Bool) (MatchTD_0_1s0a ((x String) (y String)) Bool) (MatchTD_0_1s2a ((x String) (y String)) Bool) (MatchTD_0_1s3a ((x String) (y String)) Bool) (MatchTD_0_1s4a ((x String) (y String)) Bool) (MatchTD_0_1s4a0to9os4a ((x String) (y String)) Bool) (MatchTD_0_1s4aemptyos5a ((x String) (y String)) Bool) (MatchTD_0_1s5a ((x String) (y String)) Bool) (MatchTD_0_1s10i ((x String) (y String)) Bool) (MatchTD_0_1s10iWildcs10i ((x String) (y String)) Bool) (MatchTD_0_1s10iemptycs9a ((x String) (y String)) Bool) (MatchTD_0_1s7a ((x String) (y String)) Bool) (MatchTD_0_1s8a ((x String) (y String)) Bool) (MatchTD_0_1s9a ((x String) (y String)) Bool)) ((or (MatchTD_0_1mainemptyos0a x y) (and (not (exists ((z String)) (MatchTD_0_1mainemptyos0a x z))) (MatchTD_0_1mainWildomain x y))) (MatchTD_0_1s0a x y) (and (not (= x "")) (MatchTD_0_1main (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "\u{1b}")) (MatchTD_0_1s2a (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "[")) (MatchTD_0_1s3a (str.tail x) y)) (and (not (= x "")) (>= (str.head_code x) (str.to_code "0")) (<= (str.head_code x) (str.to_code "9")) (MatchTD_0_1s4a (str.tail x) y)) (or (MatchTD_0_1s4a0to9os4a x y) (and (not (exists ((z String)) (MatchTD_0_1s4a0to9os4a x z))) (MatchTD_0_1s4aemptyos5a x y))) (and (not (= x "")) (>= (str.head_code x) (str.to_code "0")) (<= (str.head_code x) (str.to_code "9")) (MatchTD_0_1s4a (str.tail x) y)) (MatchTD_0_1s5a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "m")) (MatchTD_0_1s7a (str.tail x) y)) (or (MatchTD_0_1s10iWildcs10i x y) (and (not (exists ((z String)) (MatchTD_0_1s10iWildcs10i x z))) (MatchTD_0_1s10iemptycs9a x y))) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_1s10i (str.tail x) (str.tail y))) (MatchTD_0_1s9a x y) (MatchTD_0_1s10i x y) (or (and (= x "") (= y ""))) (MatchTD_0_1s8a x y)))
(define-funs-rec ((MatchTD_0_2main ((x String) (y String)) Bool) (MatchTD_0_2s2i ((x String) (y String)) Bool) (MatchTD_0_2s2iemptycs1a ((x String) (y String)) Bool) (MatchTD_0_2s2iWildcs2i ((x String) (y String)) Bool) (MatchTD_0_2s1a ((x String) (y String)) Bool) (MatchTD_0_2s0a ((x String) (y String)) Bool) (MatchTD_0_2s3a ((x String) (y String)) Bool) (MatchTD_0_2s4a ((x String) (y String)) Bool) (MatchTD_0_2s5a ((x String) (y String)) Bool) (MatchTD_0_2s5a0to9os5a ((x String) (y String)) Bool) (MatchTD_0_2s5aemptyos6a ((x String) (y String)) Bool) (MatchTD_0_2s6a ((x String) (y String)) Bool) (MatchTD_0_2s9a ((x String) (y String)) Bool) (MatchTD_0_2s8a ((x String) (y String)) Bool) (MatchTD_0_2s8aWildos8a ((x String) (y String)) Bool) (MatchTD_0_2s8aemptyos9a ((x String) (y String)) Bool)) ((MatchTD_0_2s2i x y) (or (MatchTD_0_2s2iemptycs1a x y) (and (not (exists ((z String)) (MatchTD_0_2s2iemptycs1a x z))) (MatchTD_0_2s2iWildcs2i x y))) (MatchTD_0_2s1a x y) (and (and (not (= x "")) (not (= y ""))) (= (str.head y) (str.head x)) (MatchTD_0_2s2i (str.tail x) (str.tail y))) (MatchTD_0_2s0a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "\u{1b}")) (MatchTD_0_2s3a (str.tail x) y)) (and (not (= x "")) (= (str.head_code x) (str.to_code "[")) (MatchTD_0_2s4a (str.tail x) y)) (and (not (= x "")) (>= (str.head_code x) (str.to_code "0")) (<= (str.head_code x) (str.to_code "9")) (MatchTD_0_2s5a (str.tail x) y)) (or (MatchTD_0_2s5a0to9os5a x y) (and (not (exists ((z String)) (MatchTD_0_2s5a0to9os5a x z))) (MatchTD_0_2s5aemptyos6a x y))) (and (not (= x "")) (>= (str.head_code x) (str.to_code "0")) (<= (str.head_code x) (str.to_code "9")) (MatchTD_0_2s5a (str.tail x) y)) (MatchTD_0_2s6a x y) (and (not (= x "")) (= (str.head_code x) (str.to_code "m")) (MatchTD_0_2s8a (str.tail x) y)) (or (and (= x "") (= y ""))) (or (MatchTD_0_2s8aWildos8a x y) (and (not (exists ((z String)) (MatchTD_0_2s8aWildos8a x z))) (MatchTD_0_2s8aemptyos9a x y))) (and (not (= x "")) (MatchTD_0_2s8a (str.tail x) y)) (MatchTD_0_2s9a x y)))
(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 6| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun Constructed_Argument () String)
(declare-fun |IsMatch_/BSx1BBS[BSd+m/_0| () Bool)
(declare-fun |IsMatch_/BSx1BBS[BSd+m/_1| () Bool)
(declare-fun Constructed_Argument_2_t () String)
(assert (= ExpandObjSwitcher 3.0))
(assert (= Constructed_Argument_t "string"))
(assert (not CreateAsClass))
(assert (MatchTD_0_2main Constructed_Argument |0 Fill 4|))
(assert (MatchTD_0_1main Constructed_Argument |0 Fill 5|))
(assert (str.in.re Constructed_Argument (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "\x1B[") (re.range "0" "9") (re.* (re.range "0" "9")) (str.to.re "m") (re.* (re.range "\x00" "\xff")))))
(declare-const replace_0_0 String)
(assert (= replace_0_0 (str.++ |0 Fill 4| |0 Fill 5|)))
(assert |IsMatch_/BSx1BBS[BSd+m/_0|)
(assert (not (str.in.re replace_0_0 (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "\x1B[") (re.range "0" "9") (re.* (re.range "0" "9")) (str.to.re "m") (re.* (re.range "\x00" "\xff"))))))
(assert (not |IsMatch_/BSx1BBS[BSd+m/_1|))
(assert (not (<= (+ (to_real (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0)))) 0) 0 (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0)))))) (to_real (ite (<= (str.len Constructed_Argument) 0) 0 (ite (>= (+ (str.len |0 Fill 4|) (* (- 1) (str.len Constructed_Argument))) 0) (str.len Constructed_Argument) (str.len |0 Fill 4|))))) 0.0)))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (= Constructed_Argument_2_t "boolean"))
(check-sat)
