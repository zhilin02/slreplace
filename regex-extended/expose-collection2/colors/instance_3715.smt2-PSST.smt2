(declare-fun ExpandObjSwitcher () Real)
(declare-fun Constructed_Argument_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 6| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun Constructed_Argument () String)
(declare-fun |IsMatch_/BSx1BBS[BSd+m/_0| () Bool)
(declare-fun |1 Fill 0| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 6| () String)
(declare-fun |1 Fill 5| () String)
(declare-fun |1 Fill 4| () String)
(declare-fun |IsMatch_/BSx1BBS[BSd+m/_1| () Bool)
(declare-fun |IsMatch_/BSx1BBS[BSd+m/_2| () Bool)
(declare-fun Constructed_Argument_2_t () String)
(assert (= ExpandObjSwitcher 3.0))
(assert (= Constructed_Argument_t "string"))
(assert CreateAsClass)
(assert (let ((re!1 (re.++ ((_ re.capture 1) (re.* (str.to.re "."))) (re.++ (str.to.re "\u{1b}") (re.++ (str.to.re "[") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to.re "m") ((_ re.capture 2) (re.* (str.to.re ".")))))))))) (and (= |0 Fill 4| ((_ str.extract 1) Constructed_Argument re!1)) (= |0 Fill 5| ((_ str.extract 2) Constructed_Argument re!1)))))
(assert (str.in.re Constructed_Argument (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "\x1B[") (re.range "0" "9") (re.* (re.range "0" "9")) (str.to.re "m") (re.* (re.range "\x00" "\xff")))))
(declare-const replace_0_0 String)
(assert (= replace_0_0 (str.replace_re Constructed_Argument (re.++ (str.to.re "\u{1b}") (re.++ (str.to.re "[") (re.++ (re.+ (re.range "0" "9")) (str.to.re "m")))) "")))
(assert |IsMatch_/BSx1BBS[BSd+m/_0|)
(assert (let ((re!1 (re.++ ((_ re.capture 1) (re.* (str.to.re "."))) (re.++ (str.to.re "\u{1b}") (re.++ (str.to.re "[") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to.re "m") ((_ re.capture 2) (re.* (str.to.re ".")))))))))) (and (= |1 Fill 4| ((_ str.extract 1) replace_0_0 re!1)) (= |1 Fill 5| ((_ str.extract 2) replace_0_0 re!1)))))
(assert (str.in.re replace_0_0 (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "\x1B[") (re.range "0" "9") (re.* (re.range "0" "9")) (str.to.re "m") (re.* (re.range "\x00" "\xff")))))
(assert |IsMatch_/BSx1BBS[BSd+m/_1|)
(assert (not |IsMatch_/BSx1BBS[BSd+m/_2|))
(assert (let ((a!2 (ite (>= (+ (str.len |0 Fill 4|) (* (- 1) (str.len Constructed_Argument))) 0) (str.len Constructed_Argument) (str.len |0 Fill 4|)))) (let ((a!6 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0)))) 0) 0 (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0))))))) (let ((a!10 (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|) (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6))) (not (str.in.re (str.++ (ite (<= (+ (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6) 0) "" (str.substr replace_0_0 0 (ite (>= (+ (str.len |1 Fill 4|) (* (- 1) (ite (<= (str.len Constructed_Argument) 0) 0 a!2)) (* (- 1) a!6)) 0) (+ (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6) (str.len |1 Fill 4|)))) (ite (>= (+ (ite (>= (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) 0) (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) (ite (>= a!10 0) a!10 0)) (* (- 1) (ite (<= (str.len Constructed_Argument) 0) 0 a!2)) (* (- 1) a!6)) 0) "" (str.substr replace_0_0 (ite (>= (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) 0) (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) (ite (>= a!10 0) a!10 0)) (+ (* (- 1) (ite (>= (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) 0) (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) (ite (>= a!10 0) a!10 0))) (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6)))) (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "\x1B[") (re.range "0" "9") (re.* (re.range "0" "9")) (str.to.re "m") (re.* (re.range "\x00" "\xff")))))))))
(assert (let ((a!2 (ite (>= (+ (str.len |0 Fill 4|) (* (- 1) (str.len Constructed_Argument))) 0) (str.len Constructed_Argument) (str.len |0 Fill 4|)))) (let ((a!6 (ite (<= (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0)))) 0) 0 (+ (str.len Constructed_Argument) (* (- 1) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|)) (ite (>= (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0) (+ (str.len |0 Fill 4|) (str.len |0 Fill 6|) (str.len Constructed_Argument)) 0))))))) (let ((a!7 (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|) (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6))) (not (<= (+ (to_real (ite (>= (+ (ite (>= (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) 0) (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) (ite (>= a!7 0) a!7 0)) (* (- 1) (ite (<= (str.len Constructed_Argument) 0) 0 a!2)) (* (- 1) a!6)) 0) 0 (+ (* (- 1) (ite (>= (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) 0) (+ (str.len |1 Fill 4|) (str.len |1 Fill 6|)) (ite (>= a!7 0) a!7 0))) (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6))) (to_real (ite (<= (+ (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6) 0) 0 (ite (>= (+ (str.len |1 Fill 4|) (* (- 1) (ite (<= (str.len Constructed_Argument) 0) 0 a!2)) (* (- 1) a!6)) 0) (+ (ite (<= (str.len Constructed_Argument) 0) 0 a!2) a!6) (str.len |1 Fill 4|))))) 0.0))))))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (= Constructed_Argument_2_t "boolean"))
(check-sat)
