(declare-fun Constructed_Argument_t () String)
(declare-fun Constructed_Argument_2_t () String)
(declare-fun Constructed_Argument_3_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument () String)
(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 5| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |IsMatch_/\\{.*\\}/_0| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= Constructed_Argument_t "string"))
(assert (not (= Constructed_Argument_2_t "string")))
(assert (not (= Constructed_Argument_2_t "number")))
(assert (not (= Constructed_Argument_2_t "boolean")))
(assert (not (= Constructed_Argument_2_t "object")))
(assert (not (= Constructed_Argument_2_t "array_number")))
(assert (not (= Constructed_Argument_2_t "array_string")))
(assert (not (= Constructed_Argument_2_t "array_bool")))
(assert (not (= Constructed_Argument_2_t "null")))
(assert (not (= Constructed_Argument_3_t "string")))
(assert (not (= Constructed_Argument_3_t "number")))
(assert (not (= Constructed_Argument_3_t "boolean")))
(assert (not (= Constructed_Argument_3_t "object")))
(assert (not (= Constructed_Argument_3_t "array_number")))
(assert (not (= Constructed_Argument_3_t "array_string")))
(assert (not (= Constructed_Argument_3_t "array_bool")))
(assert (not (= Constructed_Argument_3_t "null")))
(assert (not CreateAsClass))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0))
                          (str.len Constructed_Argument)))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1))))))
  (not (= a!2 "")))))
(assert (= |0 Fill 0| "{"))
(assert (str.in.re |0 Fill 1|
           (re.* (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (= |0 Fill 2| "}"))
(assert (let ((a!1 (re.++ (str.to.re "{")
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "}"))))
  (str.in.re (str.++ "{" |0 Fill 1| "}") a!1)))
(assert (= |0 Fill 5| (str.++ "{" |0 Fill 1| "}")))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0))
                          (str.len Constructed_Argument))))
      (a!3 (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "{")
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "}")
                  (re.* (re.range "\x00" "\xff")))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1))))))
  (or (not (str.in.re a!2 a!3))
      (= a!2 (str.++ |0 Fill 3| |0 Fill 5| |0 Fill 4|))))))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0))
                          (str.len Constructed_Argument))))
      (a!3 (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "{")
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "}")
                  (re.* (re.range "\x00" "\xff")))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1))))))
  (= (str.in.re a!2 a!3) |IsMatch_/\\{.*\\}/_0|))))
(assert (let ((a!1 (str.substr Constructed_Argument
                       ((_ str.whiteLeft 0) Constructed_Argument 0)
                       (+ (* (- 1) ((_ str.whiteLeft 0) Constructed_Argument 0))
                          (str.len Constructed_Argument))))
      (a!3 (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "{")
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "}")
                  (re.* (re.range "\x00" "\xff")))))
(let ((a!2 (str.substr a!1 0 (+ 1 ((_ str.whiteRight 0) a!1 (str.len a!1))))))
  (str.in.re a!2 a!3))))

(check-sat)