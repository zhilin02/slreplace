(declare-fun Constructed_Argument_t () String)
(declare-fun CreateAsClass () Bool)
(declare-fun Constructed_Argument_elements_routes_0_t () String)
(declare-fun Constructed_Argument_elements_mode_1_t () String)
(declare-fun Constructed_Argument_elements_mode_1 () Real)
(declare-fun Constructed_Argument_elements_base_2_t () String)
(declare-fun Constructed_Argument_elements_base_2 () String)
(declare-fun |IsMatch_/BS/$/_0| () Bool)
(assert (= Constructed_Argument_t "object"))
(assert (not CreateAsClass))
(assert (not (= Constructed_Argument_elements_routes_0_t "string")))
(assert (not (= Constructed_Argument_elements_routes_0_t "number")))
(assert (not (= Constructed_Argument_elements_routes_0_t "boolean")))
(assert (not (= Constructed_Argument_elements_routes_0_t "object")))
(assert (not (= Constructed_Argument_elements_routes_0_t "array_number")))
(assert (not (= Constructed_Argument_elements_routes_0_t "array_string")))
(assert (not (= Constructed_Argument_elements_routes_0_t "array_bool")))
(assert (not (= Constructed_Argument_elements_routes_0_t "null")))
(assert (= Constructed_Argument_elements_mode_1_t "number"))
(assert (= Constructed_Argument_elements_mode_1 0.0))
(assert (= Constructed_Argument_elements_base_2_t "string"))
(assert (not (= Constructed_Argument_elements_base_2 "")))
(assert (= (str.at Constructed_Argument_elements_base_2 0) "/"))
(assert (= (str.in.re Constructed_Argument_elements_base_2 (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "/"))) |IsMatch_/BS/$/_0|))
(assert (not |IsMatch_/BS/$/_0|))
(check-sat)
